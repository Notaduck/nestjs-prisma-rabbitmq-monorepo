// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "./src/zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  generateDto = true // (default) Generate DTOs for NestJS

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  dtoCase = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
  // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)

  dtoSuffix = "Dto" // (default) Suffix to apply to your prisma models when naming DTOs

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
  // binaryTargets = ["linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  organizationId  Int?
  organization    Organization?   @relation(fields: [organizationId], references: [id])
  todoLists       TodoList[]      @relation("owner")
  sharedTodoLists TodoList[]      @relation("sharedUsers")
  todoListShares  TodoListShare[]
  email           String?         @unique

  @@index([organizationId])
}

model Organization {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  users     User[]
  todoLists TodoList[]
}

model TodoList {
  id             Int             @id @default(autoincrement())
  name           String
  ownerId        Int
  owner          User            @relation("owner", fields: [ownerId], references: [id])
  organizationId Int?
  organization   Organization?   @relation(fields: [organizationId], references: [id])
  items          TodoItem[]
  sharedUsers    User[]          @relation("sharedUsers")
  todoListShares TodoListShare[]

  @@index([ownerId])
  @@index([organizationId])
}

model TodoItem {
  id         Int      @id @default(autoincrement())
  name       String
  priority   Int
  todoListId Int
  todoList   TodoList @relation(fields: [todoListId], references: [id])

  @@index([todoListId])
}

model TodoListShare {
  id         Int      @id @default(autoincrement())
  todoListId Int
  todoList   TodoList @relation(fields: [todoListId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  permission String

  @@index([todoListId, userId])
}
