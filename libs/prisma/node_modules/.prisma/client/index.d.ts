
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  name: string
  organizationId: number | null
  email: string | null
}

/**
 * Model Organization
 * 
 */
export type Organization = {
  id: number
  name: string
}

/**
 * Model TodoList
 * 
 */
export type TodoList = {
  id: number
  name: string
  ownerId: number
  organizationId: number | null
}

/**
 * Model TodoItem
 * 
 */
export type TodoItem = {
  id: number
  name: string
  priority: number
  todoListId: number
}

/**
 * Model TodoListShare
 * 
 */
export type TodoListShare = {
  id: number
  todoListId: number
  userId: number
  permission: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<GlobalReject>;

  /**
   * `prisma.todoList`: Exposes CRUD operations for the **TodoList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TodoLists
    * const todoLists = await prisma.todoList.findMany()
    * ```
    */
  get todoList(): Prisma.TodoListDelegate<GlobalReject>;

  /**
   * `prisma.todoItem`: Exposes CRUD operations for the **TodoItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TodoItems
    * const todoItems = await prisma.todoItem.findMany()
    * ```
    */
  get todoItem(): Prisma.TodoItemDelegate<GlobalReject>;

  /**
   * `prisma.todoListShare`: Exposes CRUD operations for the **TodoListShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TodoListShares
    * const todoListShares = await prisma.todoListShare.findMany()
    * ```
    */
  get todoListShare(): Prisma.TodoListShareDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Organization: 'Organization',
    TodoList: 'TodoList',
    TodoItem: 'TodoItem',
    TodoListShare: 'TodoListShare'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    todoLists: number
    sharedTodoLists: number
    todoListShares: number
  }

  export type UserCountOutputTypeSelect = {
    todoLists?: boolean
    sharedTodoLists?: boolean
    todoListShares?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type OrganizationCountOutputType
   */


  export type OrganizationCountOutputType = {
    users: number
    todoLists: number
  }

  export type OrganizationCountOutputTypeSelect = {
    users?: boolean
    todoLists?: boolean
  }

  export type OrganizationCountOutputTypeGetPayload<S extends boolean | null | undefined | OrganizationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrganizationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OrganizationCountOutputTypeArgs)
    ? OrganizationCountOutputType 
    : S extends { select: any } & (OrganizationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OrganizationCountOutputType ? OrganizationCountOutputType[P] : never
  } 
      : OrganizationCountOutputType




  // Custom InputTypes

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect | null
  }



  /**
   * Count Type TodoListCountOutputType
   */


  export type TodoListCountOutputType = {
    items: number
    sharedUsers: number
    todoListShares: number
  }

  export type TodoListCountOutputTypeSelect = {
    items?: boolean
    sharedUsers?: boolean
    todoListShares?: boolean
  }

  export type TodoListCountOutputTypeGetPayload<S extends boolean | null | undefined | TodoListCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TodoListCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TodoListCountOutputTypeArgs)
    ? TodoListCountOutputType 
    : S extends { select: any } & (TodoListCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TodoListCountOutputType ? TodoListCountOutputType[P] : never
  } 
      : TodoListCountOutputType




  // Custom InputTypes

  /**
   * TodoListCountOutputType without action
   */
  export type TodoListCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TodoListCountOutputType
     */
    select?: TodoListCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    organizationId: number | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    organizationId: number | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    organizationId: number
    email: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    organizationId: number | null
    email: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    organizationId?: boolean
    email?: boolean
    organization?: boolean | OrganizationArgs
    todoLists?: boolean | User$todoListsArgs
    sharedTodoLists?: boolean | User$sharedTodoListsArgs
    todoListShares?: boolean | User$todoListSharesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    organization?: boolean | OrganizationArgs
    todoLists?: boolean | User$todoListsArgs
    sharedTodoLists?: boolean | User$sharedTodoListsArgs
    todoListShares?: boolean | User$todoListSharesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'organization' ? OrganizationGetPayload<S['include'][P]> | null :
        P extends 'todoLists' ? Array < TodoListGetPayload<S['include'][P]>>  :
        P extends 'sharedTodoLists' ? Array < TodoListGetPayload<S['include'][P]>>  :
        P extends 'todoListShares' ? Array < TodoListShareGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'organization' ? OrganizationGetPayload<S['select'][P]> | null :
        P extends 'todoLists' ? Array < TodoListGetPayload<S['select'][P]>>  :
        P extends 'sharedTodoLists' ? Array < TodoListGetPayload<S['select'][P]>>  :
        P extends 'todoListShares' ? Array < TodoListShareGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    organization<T extends OrganizationArgs= {}>(args?: Subset<T, OrganizationArgs>): Prisma__OrganizationClient<OrganizationGetPayload<T> | Null>;

    todoLists<T extends User$todoListsArgs= {}>(args?: Subset<T, User$todoListsArgs>): Prisma.PrismaPromise<Array<TodoListGetPayload<T>>| Null>;

    sharedTodoLists<T extends User$sharedTodoListsArgs= {}>(args?: Subset<T, User$sharedTodoListsArgs>): Prisma.PrismaPromise<Array<TodoListGetPayload<T>>| Null>;

    todoListShares<T extends User$todoListSharesArgs= {}>(args?: Subset<T, User$todoListSharesArgs>): Prisma.PrismaPromise<Array<TodoListShareGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.todoLists
   */
  export type User$todoListsArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    where?: TodoListWhereInput
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    cursor?: TodoListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * User.sharedTodoLists
   */
  export type User$sharedTodoListsArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    where?: TodoListWhereInput
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    cursor?: TodoListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * User.todoListShares
   */
  export type User$todoListSharesArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    where?: TodoListShareWhereInput
    orderBy?: Enumerable<TodoListShareOrderByWithRelationInput>
    cursor?: TodoListShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TodoListShareScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Organization
   */


  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type OrganizationAggregateArgs = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs = {
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByWithAggregationInput>
    by: OrganizationScalarFieldEnum[]
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }


  export type OrganizationGroupByOutputType = {
    id: number
    name: string
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect = {
    id?: boolean
    name?: boolean
    users?: boolean | Organization$usersArgs
    todoLists?: boolean | Organization$todoListsArgs
    _count?: boolean | OrganizationCountOutputTypeArgs
  }


  export type OrganizationInclude = {
    users?: boolean | Organization$usersArgs
    todoLists?: boolean | Organization$todoListsArgs
    _count?: boolean | OrganizationCountOutputTypeArgs
  }

  export type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Organization :
    S extends undefined ? never :
    S extends { include: any } & (OrganizationArgs | OrganizationFindManyArgs)
    ? Organization  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'todoLists' ? Array < TodoListGetPayload<S['include'][P]>>  :
        P extends '_count' ? OrganizationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (OrganizationArgs | OrganizationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'todoLists' ? Array < TodoListGetPayload<S['select'][P]>>  :
        P extends '_count' ? OrganizationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Organization ? Organization[P] : never
  } 
      : Organization


  type OrganizationCountArgs = 
    Omit<OrganizationFindManyArgs, 'select' | 'include'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganizationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Organization'> extends True ? Prisma__OrganizationClient<OrganizationGetPayload<T>> : Prisma__OrganizationClient<OrganizationGetPayload<T> | null, null>

    /**
     * Find one Organization that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrganizationFindUniqueOrThrowArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganizationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Organization'> extends True ? Prisma__OrganizationClient<OrganizationGetPayload<T>> : Prisma__OrganizationClient<OrganizationGetPayload<T> | null, null>

    /**
     * Find the first Organization that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationFindManyArgs>(
      args?: SelectSubset<T, OrganizationFindManyArgs>
    ): Prisma.PrismaPromise<Array<OrganizationGetPayload<T>>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs>(
      args: SelectSubset<T, OrganizationCreateArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Create many Organizations.
     *     @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     *     @example
     *     // Create many Organizations
     *     const organization = await prisma.organization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizationCreateManyArgs>(
      args?: SelectSubset<T, OrganizationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs>(
      args: SelectSubset<T, OrganizationDeleteArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs>(
      args: SelectSubset<T, OrganizationUpdateArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs>(
      args?: SelectSubset<T, OrganizationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs>(
      args: SelectSubset<T, OrganizationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs>(
      args: SelectSubset<T, OrganizationUpsertArgs>
    ): Prisma__OrganizationClient<OrganizationGetPayload<T>>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    users<T extends Organization$usersArgs= {}>(args?: Subset<T, Organization$usersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    todoLists<T extends Organization$todoListsArgs= {}>(args?: Subset<T, Organization$todoListsArgs>): Prisma.PrismaPromise<Array<TodoListGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Organization base type for findUnique actions
   */
  export type OrganizationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUnique
   */
  export interface OrganizationFindUniqueArgs extends OrganizationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization base type for findFirst actions
   */
  export type OrganizationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }

  /**
   * Organization findFirst
   */
  export interface OrganizationFindFirstArgs extends OrganizationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization create
   */
  export type OrganizationCreateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }


  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs = {
    /**
     * The data used to create many Organizations.
     */
    data: Enumerable<OrganizationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Organization update
   */
  export type OrganizationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
  }


  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }


  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
  }


  /**
   * Organization.users
   */
  export type Organization$usersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Organization.todoLists
   */
  export type Organization$todoListsArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    where?: TodoListWhereInput
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    cursor?: TodoListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * Organization without action
   */
  export type OrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude | null
  }



  /**
   * Model TodoList
   */


  export type AggregateTodoList = {
    _count: TodoListCountAggregateOutputType | null
    _avg: TodoListAvgAggregateOutputType | null
    _sum: TodoListSumAggregateOutputType | null
    _min: TodoListMinAggregateOutputType | null
    _max: TodoListMaxAggregateOutputType | null
  }

  export type TodoListAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    organizationId: number | null
  }

  export type TodoListSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    organizationId: number | null
  }

  export type TodoListMinAggregateOutputType = {
    id: number | null
    name: string | null
    ownerId: number | null
    organizationId: number | null
  }

  export type TodoListMaxAggregateOutputType = {
    id: number | null
    name: string | null
    ownerId: number | null
    organizationId: number | null
  }

  export type TodoListCountAggregateOutputType = {
    id: number
    name: number
    ownerId: number
    organizationId: number
    _all: number
  }


  export type TodoListAvgAggregateInputType = {
    id?: true
    ownerId?: true
    organizationId?: true
  }

  export type TodoListSumAggregateInputType = {
    id?: true
    ownerId?: true
    organizationId?: true
  }

  export type TodoListMinAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    organizationId?: true
  }

  export type TodoListMaxAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    organizationId?: true
  }

  export type TodoListCountAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    organizationId?: true
    _all?: true
  }

  export type TodoListAggregateArgs = {
    /**
     * Filter which TodoList to aggregate.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TodoLists
    **/
    _count?: true | TodoListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TodoListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TodoListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TodoListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TodoListMaxAggregateInputType
  }

  export type GetTodoListAggregateType<T extends TodoListAggregateArgs> = {
        [P in keyof T & keyof AggregateTodoList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodoList[P]>
      : GetScalarType<T[P], AggregateTodoList[P]>
  }




  export type TodoListGroupByArgs = {
    where?: TodoListWhereInput
    orderBy?: Enumerable<TodoListOrderByWithAggregationInput>
    by: TodoListScalarFieldEnum[]
    having?: TodoListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TodoListCountAggregateInputType | true
    _avg?: TodoListAvgAggregateInputType
    _sum?: TodoListSumAggregateInputType
    _min?: TodoListMinAggregateInputType
    _max?: TodoListMaxAggregateInputType
  }


  export type TodoListGroupByOutputType = {
    id: number
    name: string
    ownerId: number
    organizationId: number | null
    _count: TodoListCountAggregateOutputType | null
    _avg: TodoListAvgAggregateOutputType | null
    _sum: TodoListSumAggregateOutputType | null
    _min: TodoListMinAggregateOutputType | null
    _max: TodoListMaxAggregateOutputType | null
  }

  type GetTodoListGroupByPayload<T extends TodoListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TodoListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TodoListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TodoListGroupByOutputType[P]>
            : GetScalarType<T[P], TodoListGroupByOutputType[P]>
        }
      >
    >


  export type TodoListSelect = {
    id?: boolean
    name?: boolean
    ownerId?: boolean
    organizationId?: boolean
    owner?: boolean | UserArgs
    organization?: boolean | OrganizationArgs
    items?: boolean | TodoList$itemsArgs
    sharedUsers?: boolean | TodoList$sharedUsersArgs
    todoListShares?: boolean | TodoList$todoListSharesArgs
    _count?: boolean | TodoListCountOutputTypeArgs
  }


  export type TodoListInclude = {
    owner?: boolean | UserArgs
    organization?: boolean | OrganizationArgs
    items?: boolean | TodoList$itemsArgs
    sharedUsers?: boolean | TodoList$sharedUsersArgs
    todoListShares?: boolean | TodoList$todoListSharesArgs
    _count?: boolean | TodoListCountOutputTypeArgs
  }

  export type TodoListGetPayload<S extends boolean | null | undefined | TodoListArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TodoList :
    S extends undefined ? never :
    S extends { include: any } & (TodoListArgs | TodoListFindManyArgs)
    ? TodoList  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'organization' ? OrganizationGetPayload<S['include'][P]> | null :
        P extends 'items' ? Array < TodoItemGetPayload<S['include'][P]>>  :
        P extends 'sharedUsers' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'todoListShares' ? Array < TodoListShareGetPayload<S['include'][P]>>  :
        P extends '_count' ? TodoListCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TodoListArgs | TodoListFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'organization' ? OrganizationGetPayload<S['select'][P]> | null :
        P extends 'items' ? Array < TodoItemGetPayload<S['select'][P]>>  :
        P extends 'sharedUsers' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'todoListShares' ? Array < TodoListShareGetPayload<S['select'][P]>>  :
        P extends '_count' ? TodoListCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TodoList ? TodoList[P] : never
  } 
      : TodoList


  type TodoListCountArgs = 
    Omit<TodoListFindManyArgs, 'select' | 'include'> & {
      select?: TodoListCountAggregateInputType | true
    }

  export interface TodoListDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TodoList that matches the filter.
     * @param {TodoListFindUniqueArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TodoListFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TodoListFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TodoList'> extends True ? Prisma__TodoListClient<TodoListGetPayload<T>> : Prisma__TodoListClient<TodoListGetPayload<T> | null, null>

    /**
     * Find one TodoList that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TodoListFindUniqueOrThrowArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TodoListFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TodoListFindUniqueOrThrowArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Find the first TodoList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindFirstArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TodoListFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TodoListFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TodoList'> extends True ? Prisma__TodoListClient<TodoListGetPayload<T>> : Prisma__TodoListClient<TodoListGetPayload<T> | null, null>

    /**
     * Find the first TodoList that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindFirstOrThrowArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TodoListFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TodoListFindFirstOrThrowArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Find zero or more TodoLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TodoLists
     * const todoLists = await prisma.todoList.findMany()
     * 
     * // Get first 10 TodoLists
     * const todoLists = await prisma.todoList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todoListWithIdOnly = await prisma.todoList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TodoListFindManyArgs>(
      args?: SelectSubset<T, TodoListFindManyArgs>
    ): Prisma.PrismaPromise<Array<TodoListGetPayload<T>>>

    /**
     * Create a TodoList.
     * @param {TodoListCreateArgs} args - Arguments to create a TodoList.
     * @example
     * // Create one TodoList
     * const TodoList = await prisma.todoList.create({
     *   data: {
     *     // ... data to create a TodoList
     *   }
     * })
     * 
    **/
    create<T extends TodoListCreateArgs>(
      args: SelectSubset<T, TodoListCreateArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Create many TodoLists.
     *     @param {TodoListCreateManyArgs} args - Arguments to create many TodoLists.
     *     @example
     *     // Create many TodoLists
     *     const todoList = await prisma.todoList.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TodoListCreateManyArgs>(
      args?: SelectSubset<T, TodoListCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TodoList.
     * @param {TodoListDeleteArgs} args - Arguments to delete one TodoList.
     * @example
     * // Delete one TodoList
     * const TodoList = await prisma.todoList.delete({
     *   where: {
     *     // ... filter to delete one TodoList
     *   }
     * })
     * 
    **/
    delete<T extends TodoListDeleteArgs>(
      args: SelectSubset<T, TodoListDeleteArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Update one TodoList.
     * @param {TodoListUpdateArgs} args - Arguments to update one TodoList.
     * @example
     * // Update one TodoList
     * const todoList = await prisma.todoList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TodoListUpdateArgs>(
      args: SelectSubset<T, TodoListUpdateArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Delete zero or more TodoLists.
     * @param {TodoListDeleteManyArgs} args - Arguments to filter TodoLists to delete.
     * @example
     * // Delete a few TodoLists
     * const { count } = await prisma.todoList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TodoListDeleteManyArgs>(
      args?: SelectSubset<T, TodoListDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TodoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TodoLists
     * const todoList = await prisma.todoList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TodoListUpdateManyArgs>(
      args: SelectSubset<T, TodoListUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TodoList.
     * @param {TodoListUpsertArgs} args - Arguments to update or create a TodoList.
     * @example
     * // Update or create a TodoList
     * const todoList = await prisma.todoList.upsert({
     *   create: {
     *     // ... data to create a TodoList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TodoList we want to update
     *   }
     * })
    **/
    upsert<T extends TodoListUpsertArgs>(
      args: SelectSubset<T, TodoListUpsertArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Count the number of TodoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListCountArgs} args - Arguments to filter TodoLists to count.
     * @example
     * // Count the number of TodoLists
     * const count = await prisma.todoList.count({
     *   where: {
     *     // ... the filter for the TodoLists we want to count
     *   }
     * })
    **/
    count<T extends TodoListCountArgs>(
      args?: Subset<T, TodoListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodoListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TodoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodoListAggregateArgs>(args: Subset<T, TodoListAggregateArgs>): Prisma.PrismaPromise<GetTodoListAggregateType<T>>

    /**
     * Group by TodoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodoListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodoListGroupByArgs['orderBy'] }
        : { orderBy?: TodoListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodoListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodoListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TodoList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TodoListClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    owner<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    organization<T extends OrganizationArgs= {}>(args?: Subset<T, OrganizationArgs>): Prisma__OrganizationClient<OrganizationGetPayload<T> | Null>;

    items<T extends TodoList$itemsArgs= {}>(args?: Subset<T, TodoList$itemsArgs>): Prisma.PrismaPromise<Array<TodoItemGetPayload<T>>| Null>;

    sharedUsers<T extends TodoList$sharedUsersArgs= {}>(args?: Subset<T, TodoList$sharedUsersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    todoListShares<T extends TodoList$todoListSharesArgs= {}>(args?: Subset<T, TodoList$todoListSharesArgs>): Prisma.PrismaPromise<Array<TodoListShareGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TodoList base type for findUnique actions
   */
  export type TodoListFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * Filter, which TodoList to fetch.
     */
    where: TodoListWhereUniqueInput
  }

  /**
   * TodoList findUnique
   */
  export interface TodoListFindUniqueArgs extends TodoListFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoList findUniqueOrThrow
   */
  export type TodoListFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * Filter, which TodoList to fetch.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList base type for findFirst actions
   */
  export type TodoListFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * Filter, which TodoList to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoLists.
     */
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }

  /**
   * TodoList findFirst
   */
  export interface TodoListFindFirstArgs extends TodoListFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoList findFirstOrThrow
   */
  export type TodoListFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * Filter, which TodoList to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoLists.
     */
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * TodoList findMany
   */
  export type TodoListFindManyArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * Filter, which TodoLists to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * TodoList create
   */
  export type TodoListCreateArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * The data needed to create a TodoList.
     */
    data: XOR<TodoListCreateInput, TodoListUncheckedCreateInput>
  }


  /**
   * TodoList createMany
   */
  export type TodoListCreateManyArgs = {
    /**
     * The data used to create many TodoLists.
     */
    data: Enumerable<TodoListCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TodoList update
   */
  export type TodoListUpdateArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * The data needed to update a TodoList.
     */
    data: XOR<TodoListUpdateInput, TodoListUncheckedUpdateInput>
    /**
     * Choose, which TodoList to update.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList updateMany
   */
  export type TodoListUpdateManyArgs = {
    /**
     * The data used to update TodoLists.
     */
    data: XOR<TodoListUpdateManyMutationInput, TodoListUncheckedUpdateManyInput>
    /**
     * Filter which TodoLists to update
     */
    where?: TodoListWhereInput
  }


  /**
   * TodoList upsert
   */
  export type TodoListUpsertArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * The filter to search for the TodoList to update in case it exists.
     */
    where: TodoListWhereUniqueInput
    /**
     * In case the TodoList found by the `where` argument doesn't exist, create a new TodoList with this data.
     */
    create: XOR<TodoListCreateInput, TodoListUncheckedCreateInput>
    /**
     * In case the TodoList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TodoListUpdateInput, TodoListUncheckedUpdateInput>
  }


  /**
   * TodoList delete
   */
  export type TodoListDeleteArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
    /**
     * Filter which TodoList to delete.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList deleteMany
   */
  export type TodoListDeleteManyArgs = {
    /**
     * Filter which TodoLists to delete
     */
    where?: TodoListWhereInput
  }


  /**
   * TodoList.items
   */
  export type TodoList$itemsArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    where?: TodoItemWhereInput
    orderBy?: Enumerable<TodoItemOrderByWithRelationInput>
    cursor?: TodoItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TodoItemScalarFieldEnum>
  }


  /**
   * TodoList.sharedUsers
   */
  export type TodoList$sharedUsersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * TodoList.todoListShares
   */
  export type TodoList$todoListSharesArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    where?: TodoListShareWhereInput
    orderBy?: Enumerable<TodoListShareOrderByWithRelationInput>
    cursor?: TodoListShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TodoListShareScalarFieldEnum>
  }


  /**
   * TodoList without action
   */
  export type TodoListArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListInclude | null
  }



  /**
   * Model TodoItem
   */


  export type AggregateTodoItem = {
    _count: TodoItemCountAggregateOutputType | null
    _avg: TodoItemAvgAggregateOutputType | null
    _sum: TodoItemSumAggregateOutputType | null
    _min: TodoItemMinAggregateOutputType | null
    _max: TodoItemMaxAggregateOutputType | null
  }

  export type TodoItemAvgAggregateOutputType = {
    id: number | null
    priority: number | null
    todoListId: number | null
  }

  export type TodoItemSumAggregateOutputType = {
    id: number | null
    priority: number | null
    todoListId: number | null
  }

  export type TodoItemMinAggregateOutputType = {
    id: number | null
    name: string | null
    priority: number | null
    todoListId: number | null
  }

  export type TodoItemMaxAggregateOutputType = {
    id: number | null
    name: string | null
    priority: number | null
    todoListId: number | null
  }

  export type TodoItemCountAggregateOutputType = {
    id: number
    name: number
    priority: number
    todoListId: number
    _all: number
  }


  export type TodoItemAvgAggregateInputType = {
    id?: true
    priority?: true
    todoListId?: true
  }

  export type TodoItemSumAggregateInputType = {
    id?: true
    priority?: true
    todoListId?: true
  }

  export type TodoItemMinAggregateInputType = {
    id?: true
    name?: true
    priority?: true
    todoListId?: true
  }

  export type TodoItemMaxAggregateInputType = {
    id?: true
    name?: true
    priority?: true
    todoListId?: true
  }

  export type TodoItemCountAggregateInputType = {
    id?: true
    name?: true
    priority?: true
    todoListId?: true
    _all?: true
  }

  export type TodoItemAggregateArgs = {
    /**
     * Filter which TodoItem to aggregate.
     */
    where?: TodoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoItems to fetch.
     */
    orderBy?: Enumerable<TodoItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TodoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TodoItems
    **/
    _count?: true | TodoItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TodoItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TodoItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TodoItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TodoItemMaxAggregateInputType
  }

  export type GetTodoItemAggregateType<T extends TodoItemAggregateArgs> = {
        [P in keyof T & keyof AggregateTodoItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodoItem[P]>
      : GetScalarType<T[P], AggregateTodoItem[P]>
  }




  export type TodoItemGroupByArgs = {
    where?: TodoItemWhereInput
    orderBy?: Enumerable<TodoItemOrderByWithAggregationInput>
    by: TodoItemScalarFieldEnum[]
    having?: TodoItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TodoItemCountAggregateInputType | true
    _avg?: TodoItemAvgAggregateInputType
    _sum?: TodoItemSumAggregateInputType
    _min?: TodoItemMinAggregateInputType
    _max?: TodoItemMaxAggregateInputType
  }


  export type TodoItemGroupByOutputType = {
    id: number
    name: string
    priority: number
    todoListId: number
    _count: TodoItemCountAggregateOutputType | null
    _avg: TodoItemAvgAggregateOutputType | null
    _sum: TodoItemSumAggregateOutputType | null
    _min: TodoItemMinAggregateOutputType | null
    _max: TodoItemMaxAggregateOutputType | null
  }

  type GetTodoItemGroupByPayload<T extends TodoItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TodoItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TodoItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TodoItemGroupByOutputType[P]>
            : GetScalarType<T[P], TodoItemGroupByOutputType[P]>
        }
      >
    >


  export type TodoItemSelect = {
    id?: boolean
    name?: boolean
    priority?: boolean
    todoListId?: boolean
    todoList?: boolean | TodoListArgs
  }


  export type TodoItemInclude = {
    todoList?: boolean | TodoListArgs
  }

  export type TodoItemGetPayload<S extends boolean | null | undefined | TodoItemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TodoItem :
    S extends undefined ? never :
    S extends { include: any } & (TodoItemArgs | TodoItemFindManyArgs)
    ? TodoItem  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'todoList' ? TodoListGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TodoItemArgs | TodoItemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'todoList' ? TodoListGetPayload<S['select'][P]> :  P extends keyof TodoItem ? TodoItem[P] : never
  } 
      : TodoItem


  type TodoItemCountArgs = 
    Omit<TodoItemFindManyArgs, 'select' | 'include'> & {
      select?: TodoItemCountAggregateInputType | true
    }

  export interface TodoItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TodoItem that matches the filter.
     * @param {TodoItemFindUniqueArgs} args - Arguments to find a TodoItem
     * @example
     * // Get one TodoItem
     * const todoItem = await prisma.todoItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TodoItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TodoItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TodoItem'> extends True ? Prisma__TodoItemClient<TodoItemGetPayload<T>> : Prisma__TodoItemClient<TodoItemGetPayload<T> | null, null>

    /**
     * Find one TodoItem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TodoItemFindUniqueOrThrowArgs} args - Arguments to find a TodoItem
     * @example
     * // Get one TodoItem
     * const todoItem = await prisma.todoItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TodoItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TodoItemFindUniqueOrThrowArgs>
    ): Prisma__TodoItemClient<TodoItemGetPayload<T>>

    /**
     * Find the first TodoItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoItemFindFirstArgs} args - Arguments to find a TodoItem
     * @example
     * // Get one TodoItem
     * const todoItem = await prisma.todoItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TodoItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TodoItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TodoItem'> extends True ? Prisma__TodoItemClient<TodoItemGetPayload<T>> : Prisma__TodoItemClient<TodoItemGetPayload<T> | null, null>

    /**
     * Find the first TodoItem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoItemFindFirstOrThrowArgs} args - Arguments to find a TodoItem
     * @example
     * // Get one TodoItem
     * const todoItem = await prisma.todoItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TodoItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TodoItemFindFirstOrThrowArgs>
    ): Prisma__TodoItemClient<TodoItemGetPayload<T>>

    /**
     * Find zero or more TodoItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TodoItems
     * const todoItems = await prisma.todoItem.findMany()
     * 
     * // Get first 10 TodoItems
     * const todoItems = await prisma.todoItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todoItemWithIdOnly = await prisma.todoItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TodoItemFindManyArgs>(
      args?: SelectSubset<T, TodoItemFindManyArgs>
    ): Prisma.PrismaPromise<Array<TodoItemGetPayload<T>>>

    /**
     * Create a TodoItem.
     * @param {TodoItemCreateArgs} args - Arguments to create a TodoItem.
     * @example
     * // Create one TodoItem
     * const TodoItem = await prisma.todoItem.create({
     *   data: {
     *     // ... data to create a TodoItem
     *   }
     * })
     * 
    **/
    create<T extends TodoItemCreateArgs>(
      args: SelectSubset<T, TodoItemCreateArgs>
    ): Prisma__TodoItemClient<TodoItemGetPayload<T>>

    /**
     * Create many TodoItems.
     *     @param {TodoItemCreateManyArgs} args - Arguments to create many TodoItems.
     *     @example
     *     // Create many TodoItems
     *     const todoItem = await prisma.todoItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TodoItemCreateManyArgs>(
      args?: SelectSubset<T, TodoItemCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TodoItem.
     * @param {TodoItemDeleteArgs} args - Arguments to delete one TodoItem.
     * @example
     * // Delete one TodoItem
     * const TodoItem = await prisma.todoItem.delete({
     *   where: {
     *     // ... filter to delete one TodoItem
     *   }
     * })
     * 
    **/
    delete<T extends TodoItemDeleteArgs>(
      args: SelectSubset<T, TodoItemDeleteArgs>
    ): Prisma__TodoItemClient<TodoItemGetPayload<T>>

    /**
     * Update one TodoItem.
     * @param {TodoItemUpdateArgs} args - Arguments to update one TodoItem.
     * @example
     * // Update one TodoItem
     * const todoItem = await prisma.todoItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TodoItemUpdateArgs>(
      args: SelectSubset<T, TodoItemUpdateArgs>
    ): Prisma__TodoItemClient<TodoItemGetPayload<T>>

    /**
     * Delete zero or more TodoItems.
     * @param {TodoItemDeleteManyArgs} args - Arguments to filter TodoItems to delete.
     * @example
     * // Delete a few TodoItems
     * const { count } = await prisma.todoItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TodoItemDeleteManyArgs>(
      args?: SelectSubset<T, TodoItemDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TodoItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TodoItems
     * const todoItem = await prisma.todoItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TodoItemUpdateManyArgs>(
      args: SelectSubset<T, TodoItemUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TodoItem.
     * @param {TodoItemUpsertArgs} args - Arguments to update or create a TodoItem.
     * @example
     * // Update or create a TodoItem
     * const todoItem = await prisma.todoItem.upsert({
     *   create: {
     *     // ... data to create a TodoItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TodoItem we want to update
     *   }
     * })
    **/
    upsert<T extends TodoItemUpsertArgs>(
      args: SelectSubset<T, TodoItemUpsertArgs>
    ): Prisma__TodoItemClient<TodoItemGetPayload<T>>

    /**
     * Count the number of TodoItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoItemCountArgs} args - Arguments to filter TodoItems to count.
     * @example
     * // Count the number of TodoItems
     * const count = await prisma.todoItem.count({
     *   where: {
     *     // ... the filter for the TodoItems we want to count
     *   }
     * })
    **/
    count<T extends TodoItemCountArgs>(
      args?: Subset<T, TodoItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodoItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TodoItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodoItemAggregateArgs>(args: Subset<T, TodoItemAggregateArgs>): Prisma.PrismaPromise<GetTodoItemAggregateType<T>>

    /**
     * Group by TodoItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodoItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodoItemGroupByArgs['orderBy'] }
        : { orderBy?: TodoItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodoItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodoItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TodoItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TodoItemClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    todoList<T extends TodoListArgs= {}>(args?: Subset<T, TodoListArgs>): Prisma__TodoListClient<TodoListGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TodoItem base type for findUnique actions
   */
  export type TodoItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * Filter, which TodoItem to fetch.
     */
    where: TodoItemWhereUniqueInput
  }

  /**
   * TodoItem findUnique
   */
  export interface TodoItemFindUniqueArgs extends TodoItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoItem findUniqueOrThrow
   */
  export type TodoItemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * Filter, which TodoItem to fetch.
     */
    where: TodoItemWhereUniqueInput
  }


  /**
   * TodoItem base type for findFirst actions
   */
  export type TodoItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * Filter, which TodoItem to fetch.
     */
    where?: TodoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoItems to fetch.
     */
    orderBy?: Enumerable<TodoItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoItems.
     */
    cursor?: TodoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoItems.
     */
    distinct?: Enumerable<TodoItemScalarFieldEnum>
  }

  /**
   * TodoItem findFirst
   */
  export interface TodoItemFindFirstArgs extends TodoItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoItem findFirstOrThrow
   */
  export type TodoItemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * Filter, which TodoItem to fetch.
     */
    where?: TodoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoItems to fetch.
     */
    orderBy?: Enumerable<TodoItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoItems.
     */
    cursor?: TodoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoItems.
     */
    distinct?: Enumerable<TodoItemScalarFieldEnum>
  }


  /**
   * TodoItem findMany
   */
  export type TodoItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * Filter, which TodoItems to fetch.
     */
    where?: TodoItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoItems to fetch.
     */
    orderBy?: Enumerable<TodoItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TodoItems.
     */
    cursor?: TodoItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoItems.
     */
    skip?: number
    distinct?: Enumerable<TodoItemScalarFieldEnum>
  }


  /**
   * TodoItem create
   */
  export type TodoItemCreateArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * The data needed to create a TodoItem.
     */
    data: XOR<TodoItemCreateInput, TodoItemUncheckedCreateInput>
  }


  /**
   * TodoItem createMany
   */
  export type TodoItemCreateManyArgs = {
    /**
     * The data used to create many TodoItems.
     */
    data: Enumerable<TodoItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TodoItem update
   */
  export type TodoItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * The data needed to update a TodoItem.
     */
    data: XOR<TodoItemUpdateInput, TodoItemUncheckedUpdateInput>
    /**
     * Choose, which TodoItem to update.
     */
    where: TodoItemWhereUniqueInput
  }


  /**
   * TodoItem updateMany
   */
  export type TodoItemUpdateManyArgs = {
    /**
     * The data used to update TodoItems.
     */
    data: XOR<TodoItemUpdateManyMutationInput, TodoItemUncheckedUpdateManyInput>
    /**
     * Filter which TodoItems to update
     */
    where?: TodoItemWhereInput
  }


  /**
   * TodoItem upsert
   */
  export type TodoItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * The filter to search for the TodoItem to update in case it exists.
     */
    where: TodoItemWhereUniqueInput
    /**
     * In case the TodoItem found by the `where` argument doesn't exist, create a new TodoItem with this data.
     */
    create: XOR<TodoItemCreateInput, TodoItemUncheckedCreateInput>
    /**
     * In case the TodoItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TodoItemUpdateInput, TodoItemUncheckedUpdateInput>
  }


  /**
   * TodoItem delete
   */
  export type TodoItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
    /**
     * Filter which TodoItem to delete.
     */
    where: TodoItemWhereUniqueInput
  }


  /**
   * TodoItem deleteMany
   */
  export type TodoItemDeleteManyArgs = {
    /**
     * Filter which TodoItems to delete
     */
    where?: TodoItemWhereInput
  }


  /**
   * TodoItem without action
   */
  export type TodoItemArgs = {
    /**
     * Select specific fields to fetch from the TodoItem
     */
    select?: TodoItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoItemInclude | null
  }



  /**
   * Model TodoListShare
   */


  export type AggregateTodoListShare = {
    _count: TodoListShareCountAggregateOutputType | null
    _avg: TodoListShareAvgAggregateOutputType | null
    _sum: TodoListShareSumAggregateOutputType | null
    _min: TodoListShareMinAggregateOutputType | null
    _max: TodoListShareMaxAggregateOutputType | null
  }

  export type TodoListShareAvgAggregateOutputType = {
    id: number | null
    todoListId: number | null
    userId: number | null
  }

  export type TodoListShareSumAggregateOutputType = {
    id: number | null
    todoListId: number | null
    userId: number | null
  }

  export type TodoListShareMinAggregateOutputType = {
    id: number | null
    todoListId: number | null
    userId: number | null
    permission: string | null
  }

  export type TodoListShareMaxAggregateOutputType = {
    id: number | null
    todoListId: number | null
    userId: number | null
    permission: string | null
  }

  export type TodoListShareCountAggregateOutputType = {
    id: number
    todoListId: number
    userId: number
    permission: number
    _all: number
  }


  export type TodoListShareAvgAggregateInputType = {
    id?: true
    todoListId?: true
    userId?: true
  }

  export type TodoListShareSumAggregateInputType = {
    id?: true
    todoListId?: true
    userId?: true
  }

  export type TodoListShareMinAggregateInputType = {
    id?: true
    todoListId?: true
    userId?: true
    permission?: true
  }

  export type TodoListShareMaxAggregateInputType = {
    id?: true
    todoListId?: true
    userId?: true
    permission?: true
  }

  export type TodoListShareCountAggregateInputType = {
    id?: true
    todoListId?: true
    userId?: true
    permission?: true
    _all?: true
  }

  export type TodoListShareAggregateArgs = {
    /**
     * Filter which TodoListShare to aggregate.
     */
    where?: TodoListShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoListShares to fetch.
     */
    orderBy?: Enumerable<TodoListShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TodoListShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoListShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoListShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TodoListShares
    **/
    _count?: true | TodoListShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TodoListShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TodoListShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TodoListShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TodoListShareMaxAggregateInputType
  }

  export type GetTodoListShareAggregateType<T extends TodoListShareAggregateArgs> = {
        [P in keyof T & keyof AggregateTodoListShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodoListShare[P]>
      : GetScalarType<T[P], AggregateTodoListShare[P]>
  }




  export type TodoListShareGroupByArgs = {
    where?: TodoListShareWhereInput
    orderBy?: Enumerable<TodoListShareOrderByWithAggregationInput>
    by: TodoListShareScalarFieldEnum[]
    having?: TodoListShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TodoListShareCountAggregateInputType | true
    _avg?: TodoListShareAvgAggregateInputType
    _sum?: TodoListShareSumAggregateInputType
    _min?: TodoListShareMinAggregateInputType
    _max?: TodoListShareMaxAggregateInputType
  }


  export type TodoListShareGroupByOutputType = {
    id: number
    todoListId: number
    userId: number
    permission: string
    _count: TodoListShareCountAggregateOutputType | null
    _avg: TodoListShareAvgAggregateOutputType | null
    _sum: TodoListShareSumAggregateOutputType | null
    _min: TodoListShareMinAggregateOutputType | null
    _max: TodoListShareMaxAggregateOutputType | null
  }

  type GetTodoListShareGroupByPayload<T extends TodoListShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TodoListShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TodoListShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TodoListShareGroupByOutputType[P]>
            : GetScalarType<T[P], TodoListShareGroupByOutputType[P]>
        }
      >
    >


  export type TodoListShareSelect = {
    id?: boolean
    todoListId?: boolean
    userId?: boolean
    permission?: boolean
    todoList?: boolean | TodoListArgs
    user?: boolean | UserArgs
  }


  export type TodoListShareInclude = {
    todoList?: boolean | TodoListArgs
    user?: boolean | UserArgs
  }

  export type TodoListShareGetPayload<S extends boolean | null | undefined | TodoListShareArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TodoListShare :
    S extends undefined ? never :
    S extends { include: any } & (TodoListShareArgs | TodoListShareFindManyArgs)
    ? TodoListShare  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'todoList' ? TodoListGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TodoListShareArgs | TodoListShareFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'todoList' ? TodoListGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof TodoListShare ? TodoListShare[P] : never
  } 
      : TodoListShare


  type TodoListShareCountArgs = 
    Omit<TodoListShareFindManyArgs, 'select' | 'include'> & {
      select?: TodoListShareCountAggregateInputType | true
    }

  export interface TodoListShareDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TodoListShare that matches the filter.
     * @param {TodoListShareFindUniqueArgs} args - Arguments to find a TodoListShare
     * @example
     * // Get one TodoListShare
     * const todoListShare = await prisma.todoListShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TodoListShareFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TodoListShareFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TodoListShare'> extends True ? Prisma__TodoListShareClient<TodoListShareGetPayload<T>> : Prisma__TodoListShareClient<TodoListShareGetPayload<T> | null, null>

    /**
     * Find one TodoListShare that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TodoListShareFindUniqueOrThrowArgs} args - Arguments to find a TodoListShare
     * @example
     * // Get one TodoListShare
     * const todoListShare = await prisma.todoListShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TodoListShareFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TodoListShareFindUniqueOrThrowArgs>
    ): Prisma__TodoListShareClient<TodoListShareGetPayload<T>>

    /**
     * Find the first TodoListShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListShareFindFirstArgs} args - Arguments to find a TodoListShare
     * @example
     * // Get one TodoListShare
     * const todoListShare = await prisma.todoListShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TodoListShareFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TodoListShareFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TodoListShare'> extends True ? Prisma__TodoListShareClient<TodoListShareGetPayload<T>> : Prisma__TodoListShareClient<TodoListShareGetPayload<T> | null, null>

    /**
     * Find the first TodoListShare that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListShareFindFirstOrThrowArgs} args - Arguments to find a TodoListShare
     * @example
     * // Get one TodoListShare
     * const todoListShare = await prisma.todoListShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TodoListShareFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TodoListShareFindFirstOrThrowArgs>
    ): Prisma__TodoListShareClient<TodoListShareGetPayload<T>>

    /**
     * Find zero or more TodoListShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListShareFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TodoListShares
     * const todoListShares = await prisma.todoListShare.findMany()
     * 
     * // Get first 10 TodoListShares
     * const todoListShares = await prisma.todoListShare.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todoListShareWithIdOnly = await prisma.todoListShare.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TodoListShareFindManyArgs>(
      args?: SelectSubset<T, TodoListShareFindManyArgs>
    ): Prisma.PrismaPromise<Array<TodoListShareGetPayload<T>>>

    /**
     * Create a TodoListShare.
     * @param {TodoListShareCreateArgs} args - Arguments to create a TodoListShare.
     * @example
     * // Create one TodoListShare
     * const TodoListShare = await prisma.todoListShare.create({
     *   data: {
     *     // ... data to create a TodoListShare
     *   }
     * })
     * 
    **/
    create<T extends TodoListShareCreateArgs>(
      args: SelectSubset<T, TodoListShareCreateArgs>
    ): Prisma__TodoListShareClient<TodoListShareGetPayload<T>>

    /**
     * Create many TodoListShares.
     *     @param {TodoListShareCreateManyArgs} args - Arguments to create many TodoListShares.
     *     @example
     *     // Create many TodoListShares
     *     const todoListShare = await prisma.todoListShare.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TodoListShareCreateManyArgs>(
      args?: SelectSubset<T, TodoListShareCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TodoListShare.
     * @param {TodoListShareDeleteArgs} args - Arguments to delete one TodoListShare.
     * @example
     * // Delete one TodoListShare
     * const TodoListShare = await prisma.todoListShare.delete({
     *   where: {
     *     // ... filter to delete one TodoListShare
     *   }
     * })
     * 
    **/
    delete<T extends TodoListShareDeleteArgs>(
      args: SelectSubset<T, TodoListShareDeleteArgs>
    ): Prisma__TodoListShareClient<TodoListShareGetPayload<T>>

    /**
     * Update one TodoListShare.
     * @param {TodoListShareUpdateArgs} args - Arguments to update one TodoListShare.
     * @example
     * // Update one TodoListShare
     * const todoListShare = await prisma.todoListShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TodoListShareUpdateArgs>(
      args: SelectSubset<T, TodoListShareUpdateArgs>
    ): Prisma__TodoListShareClient<TodoListShareGetPayload<T>>

    /**
     * Delete zero or more TodoListShares.
     * @param {TodoListShareDeleteManyArgs} args - Arguments to filter TodoListShares to delete.
     * @example
     * // Delete a few TodoListShares
     * const { count } = await prisma.todoListShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TodoListShareDeleteManyArgs>(
      args?: SelectSubset<T, TodoListShareDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TodoListShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TodoListShares
     * const todoListShare = await prisma.todoListShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TodoListShareUpdateManyArgs>(
      args: SelectSubset<T, TodoListShareUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TodoListShare.
     * @param {TodoListShareUpsertArgs} args - Arguments to update or create a TodoListShare.
     * @example
     * // Update or create a TodoListShare
     * const todoListShare = await prisma.todoListShare.upsert({
     *   create: {
     *     // ... data to create a TodoListShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TodoListShare we want to update
     *   }
     * })
    **/
    upsert<T extends TodoListShareUpsertArgs>(
      args: SelectSubset<T, TodoListShareUpsertArgs>
    ): Prisma__TodoListShareClient<TodoListShareGetPayload<T>>

    /**
     * Count the number of TodoListShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListShareCountArgs} args - Arguments to filter TodoListShares to count.
     * @example
     * // Count the number of TodoListShares
     * const count = await prisma.todoListShare.count({
     *   where: {
     *     // ... the filter for the TodoListShares we want to count
     *   }
     * })
    **/
    count<T extends TodoListShareCountArgs>(
      args?: Subset<T, TodoListShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodoListShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TodoListShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodoListShareAggregateArgs>(args: Subset<T, TodoListShareAggregateArgs>): Prisma.PrismaPromise<GetTodoListShareAggregateType<T>>

    /**
     * Group by TodoListShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodoListShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodoListShareGroupByArgs['orderBy'] }
        : { orderBy?: TodoListShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodoListShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodoListShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TodoListShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TodoListShareClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    todoList<T extends TodoListArgs= {}>(args?: Subset<T, TodoListArgs>): Prisma__TodoListClient<TodoListGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TodoListShare base type for findUnique actions
   */
  export type TodoListShareFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * Filter, which TodoListShare to fetch.
     */
    where: TodoListShareWhereUniqueInput
  }

  /**
   * TodoListShare findUnique
   */
  export interface TodoListShareFindUniqueArgs extends TodoListShareFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoListShare findUniqueOrThrow
   */
  export type TodoListShareFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * Filter, which TodoListShare to fetch.
     */
    where: TodoListShareWhereUniqueInput
  }


  /**
   * TodoListShare base type for findFirst actions
   */
  export type TodoListShareFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * Filter, which TodoListShare to fetch.
     */
    where?: TodoListShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoListShares to fetch.
     */
    orderBy?: Enumerable<TodoListShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoListShares.
     */
    cursor?: TodoListShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoListShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoListShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoListShares.
     */
    distinct?: Enumerable<TodoListShareScalarFieldEnum>
  }

  /**
   * TodoListShare findFirst
   */
  export interface TodoListShareFindFirstArgs extends TodoListShareFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoListShare findFirstOrThrow
   */
  export type TodoListShareFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * Filter, which TodoListShare to fetch.
     */
    where?: TodoListShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoListShares to fetch.
     */
    orderBy?: Enumerable<TodoListShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoListShares.
     */
    cursor?: TodoListShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoListShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoListShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoListShares.
     */
    distinct?: Enumerable<TodoListShareScalarFieldEnum>
  }


  /**
   * TodoListShare findMany
   */
  export type TodoListShareFindManyArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * Filter, which TodoListShares to fetch.
     */
    where?: TodoListShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoListShares to fetch.
     */
    orderBy?: Enumerable<TodoListShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TodoListShares.
     */
    cursor?: TodoListShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoListShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoListShares.
     */
    skip?: number
    distinct?: Enumerable<TodoListShareScalarFieldEnum>
  }


  /**
   * TodoListShare create
   */
  export type TodoListShareCreateArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * The data needed to create a TodoListShare.
     */
    data: XOR<TodoListShareCreateInput, TodoListShareUncheckedCreateInput>
  }


  /**
   * TodoListShare createMany
   */
  export type TodoListShareCreateManyArgs = {
    /**
     * The data used to create many TodoListShares.
     */
    data: Enumerable<TodoListShareCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TodoListShare update
   */
  export type TodoListShareUpdateArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * The data needed to update a TodoListShare.
     */
    data: XOR<TodoListShareUpdateInput, TodoListShareUncheckedUpdateInput>
    /**
     * Choose, which TodoListShare to update.
     */
    where: TodoListShareWhereUniqueInput
  }


  /**
   * TodoListShare updateMany
   */
  export type TodoListShareUpdateManyArgs = {
    /**
     * The data used to update TodoListShares.
     */
    data: XOR<TodoListShareUpdateManyMutationInput, TodoListShareUncheckedUpdateManyInput>
    /**
     * Filter which TodoListShares to update
     */
    where?: TodoListShareWhereInput
  }


  /**
   * TodoListShare upsert
   */
  export type TodoListShareUpsertArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * The filter to search for the TodoListShare to update in case it exists.
     */
    where: TodoListShareWhereUniqueInput
    /**
     * In case the TodoListShare found by the `where` argument doesn't exist, create a new TodoListShare with this data.
     */
    create: XOR<TodoListShareCreateInput, TodoListShareUncheckedCreateInput>
    /**
     * In case the TodoListShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TodoListShareUpdateInput, TodoListShareUncheckedUpdateInput>
  }


  /**
   * TodoListShare delete
   */
  export type TodoListShareDeleteArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
    /**
     * Filter which TodoListShare to delete.
     */
    where: TodoListShareWhereUniqueInput
  }


  /**
   * TodoListShare deleteMany
   */
  export type TodoListShareDeleteManyArgs = {
    /**
     * Filter which TodoListShares to delete
     */
    where?: TodoListShareWhereInput
  }


  /**
   * TodoListShare without action
   */
  export type TodoListShareArgs = {
    /**
     * Select specific fields to fetch from the TodoListShare
     */
    select?: TodoListShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TodoListShareInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TodoItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    priority: 'priority',
    todoListId: 'todoListId'
  };

  export type TodoItemScalarFieldEnum = (typeof TodoItemScalarFieldEnum)[keyof typeof TodoItemScalarFieldEnum]


  export const TodoListScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ownerId: 'ownerId',
    organizationId: 'organizationId'
  };

  export type TodoListScalarFieldEnum = (typeof TodoListScalarFieldEnum)[keyof typeof TodoListScalarFieldEnum]


  export const TodoListShareScalarFieldEnum: {
    id: 'id',
    todoListId: 'todoListId',
    userId: 'userId',
    permission: 'permission'
  };

  export type TodoListShareScalarFieldEnum = (typeof TodoListShareScalarFieldEnum)[keyof typeof TodoListShareScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    organizationId: 'organizationId',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    organizationId?: IntNullableFilter | number | null
    email?: StringNullableFilter | string | null
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput> | null
    todoLists?: TodoListListRelationFilter
    sharedTodoLists?: TodoListListRelationFilter
    todoListShares?: TodoListShareListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    todoLists?: TodoListOrderByRelationAggregateInput
    sharedTodoLists?: TodoListOrderByRelationAggregateInput
    todoListShares?: TodoListShareOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    organizationId?: IntNullableWithAggregatesFilter | number | null
    email?: StringNullableWithAggregatesFilter | string | null
  }

  export type OrganizationWhereInput = {
    AND?: Enumerable<OrganizationWhereInput>
    OR?: Enumerable<OrganizationWhereInput>
    NOT?: Enumerable<OrganizationWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    users?: UserListRelationFilter
    todoLists?: TodoListListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
    todoLists?: TodoListOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type TodoListWhereInput = {
    AND?: Enumerable<TodoListWhereInput>
    OR?: Enumerable<TodoListWhereInput>
    NOT?: Enumerable<TodoListWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    ownerId?: IntFilter | number
    organizationId?: IntNullableFilter | number | null
    owner?: XOR<UserRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput> | null
    items?: TodoItemListRelationFilter
    sharedUsers?: UserListRelationFilter
    todoListShares?: TodoListShareListRelationFilter
  }

  export type TodoListOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    organizationId?: SortOrder
    owner?: UserOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    items?: TodoItemOrderByRelationAggregateInput
    sharedUsers?: UserOrderByRelationAggregateInput
    todoListShares?: TodoListShareOrderByRelationAggregateInput
  }

  export type TodoListWhereUniqueInput = {
    id?: number
  }

  export type TodoListOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    organizationId?: SortOrder
    _count?: TodoListCountOrderByAggregateInput
    _avg?: TodoListAvgOrderByAggregateInput
    _max?: TodoListMaxOrderByAggregateInput
    _min?: TodoListMinOrderByAggregateInput
    _sum?: TodoListSumOrderByAggregateInput
  }

  export type TodoListScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    OR?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    ownerId?: IntWithAggregatesFilter | number
    organizationId?: IntNullableWithAggregatesFilter | number | null
  }

  export type TodoItemWhereInput = {
    AND?: Enumerable<TodoItemWhereInput>
    OR?: Enumerable<TodoItemWhereInput>
    NOT?: Enumerable<TodoItemWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    priority?: IntFilter | number
    todoListId?: IntFilter | number
    todoList?: XOR<TodoListRelationFilter, TodoListWhereInput>
  }

  export type TodoItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    priority?: SortOrder
    todoListId?: SortOrder
    todoList?: TodoListOrderByWithRelationInput
  }

  export type TodoItemWhereUniqueInput = {
    id?: number
  }

  export type TodoItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    priority?: SortOrder
    todoListId?: SortOrder
    _count?: TodoItemCountOrderByAggregateInput
    _avg?: TodoItemAvgOrderByAggregateInput
    _max?: TodoItemMaxOrderByAggregateInput
    _min?: TodoItemMinOrderByAggregateInput
    _sum?: TodoItemSumOrderByAggregateInput
  }

  export type TodoItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TodoItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<TodoItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TodoItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    priority?: IntWithAggregatesFilter | number
    todoListId?: IntWithAggregatesFilter | number
  }

  export type TodoListShareWhereInput = {
    AND?: Enumerable<TodoListShareWhereInput>
    OR?: Enumerable<TodoListShareWhereInput>
    NOT?: Enumerable<TodoListShareWhereInput>
    id?: IntFilter | number
    todoListId?: IntFilter | number
    userId?: IntFilter | number
    permission?: StringFilter | string
    todoList?: XOR<TodoListRelationFilter, TodoListWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TodoListShareOrderByWithRelationInput = {
    id?: SortOrder
    todoListId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    todoList?: TodoListOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TodoListShareWhereUniqueInput = {
    id?: number
  }

  export type TodoListShareOrderByWithAggregationInput = {
    id?: SortOrder
    todoListId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    _count?: TodoListShareCountOrderByAggregateInput
    _avg?: TodoListShareAvgOrderByAggregateInput
    _max?: TodoListShareMaxOrderByAggregateInput
    _min?: TodoListShareMinOrderByAggregateInput
    _sum?: TodoListShareSumOrderByAggregateInput
  }

  export type TodoListShareScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TodoListShareScalarWhereWithAggregatesInput>
    OR?: Enumerable<TodoListShareScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TodoListShareScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    todoListId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    permission?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    name: string
    email?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    todoLists?: TodoListCreateNestedManyWithoutOwnerInput
    sharedTodoLists?: TodoListCreateNestedManyWithoutSharedUsersInput
    todoListShares?: TodoListShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    organizationId?: number | null
    email?: string | null
    todoLists?: TodoListUncheckedCreateNestedManyWithoutOwnerInput
    sharedTodoLists?: TodoListUncheckedCreateNestedManyWithoutSharedUsersInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    todoLists?: TodoListUpdateManyWithoutOwnerNestedInput
    sharedTodoLists?: TodoListUpdateManyWithoutSharedUsersNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    todoLists?: TodoListUncheckedUpdateManyWithoutOwnerNestedInput
    sharedTodoLists?: TodoListUncheckedUpdateManyWithoutSharedUsersNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    organizationId?: number | null
    email?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutOrganizationInput
    todoLists?: TodoListCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    todoLists?: TodoListUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    todoLists?: TodoListUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    todoLists?: TodoListUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: number
    name: string
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TodoListCreateInput = {
    name: string
    owner: UserCreateNestedOneWithoutTodoListsInput
    organization?: OrganizationCreateNestedOneWithoutTodoListsInput
    items?: TodoItemCreateNestedManyWithoutTodoListInput
    sharedUsers?: UserCreateNestedManyWithoutSharedTodoListsInput
    todoListShares?: TodoListShareCreateNestedManyWithoutTodoListInput
  }

  export type TodoListUncheckedCreateInput = {
    id?: number
    name: string
    ownerId: number
    organizationId?: number | null
    items?: TodoItemUncheckedCreateNestedManyWithoutTodoListInput
    sharedUsers?: UserUncheckedCreateNestedManyWithoutSharedTodoListsInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutTodoListInput
  }

  export type TodoListUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutTodoListsNestedInput
    organization?: OrganizationUpdateOneWithoutTodoListsNestedInput
    items?: TodoItemUpdateManyWithoutTodoListNestedInput
    sharedUsers?: UserUpdateManyWithoutSharedTodoListsNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: TodoItemUncheckedUpdateManyWithoutTodoListNestedInput
    sharedUsers?: UserUncheckedUpdateManyWithoutSharedTodoListsNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListCreateManyInput = {
    id?: number
    name: string
    ownerId: number
    organizationId?: number | null
  }

  export type TodoListUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TodoListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TodoItemCreateInput = {
    name: string
    priority: number
    todoList: TodoListCreateNestedOneWithoutItemsInput
  }

  export type TodoItemUncheckedCreateInput = {
    id?: number
    name: string
    priority: number
    todoListId: number
  }

  export type TodoItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    todoList?: TodoListUpdateOneRequiredWithoutItemsNestedInput
  }

  export type TodoItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    todoListId?: IntFieldUpdateOperationsInput | number
  }

  export type TodoItemCreateManyInput = {
    id?: number
    name: string
    priority: number
    todoListId: number
  }

  export type TodoItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type TodoItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    todoListId?: IntFieldUpdateOperationsInput | number
  }

  export type TodoListShareCreateInput = {
    permission: string
    todoList: TodoListCreateNestedOneWithoutTodoListSharesInput
    user: UserCreateNestedOneWithoutTodoListSharesInput
  }

  export type TodoListShareUncheckedCreateInput = {
    id?: number
    todoListId: number
    userId: number
    permission: string
  }

  export type TodoListShareUpdateInput = {
    permission?: StringFieldUpdateOperationsInput | string
    todoList?: TodoListUpdateOneRequiredWithoutTodoListSharesNestedInput
    user?: UserUpdateOneRequiredWithoutTodoListSharesNestedInput
  }

  export type TodoListShareUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    todoListId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type TodoListShareCreateManyInput = {
    id?: number
    todoListId: number
    userId: number
    permission: string
  }

  export type TodoListShareUpdateManyMutationInput = {
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type TodoListShareUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    todoListId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type TodoListListRelationFilter = {
    every?: TodoListWhereInput
    some?: TodoListWhereInput
    none?: TodoListWhereInput
  }

  export type TodoListShareListRelationFilter = {
    every?: TodoListShareWhereInput
    some?: TodoListShareWhereInput
    none?: TodoListShareWhereInput
  }

  export type TodoListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TodoListShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TodoItemListRelationFilter = {
    every?: TodoItemWhereInput
    some?: TodoItemWhereInput
    none?: TodoItemWhereInput
  }

  export type TodoItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TodoListCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    organizationId?: SortOrder
  }

  export type TodoListAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    organizationId?: SortOrder
  }

  export type TodoListMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    organizationId?: SortOrder
  }

  export type TodoListMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    organizationId?: SortOrder
  }

  export type TodoListSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    organizationId?: SortOrder
  }

  export type TodoListRelationFilter = {
    is?: TodoListWhereInput
    isNot?: TodoListWhereInput
  }

  export type TodoItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    priority?: SortOrder
    todoListId?: SortOrder
  }

  export type TodoItemAvgOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
    todoListId?: SortOrder
  }

  export type TodoItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    priority?: SortOrder
    todoListId?: SortOrder
  }

  export type TodoItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    priority?: SortOrder
    todoListId?: SortOrder
  }

  export type TodoItemSumOrderByAggregateInput = {
    id?: SortOrder
    priority?: SortOrder
    todoListId?: SortOrder
  }

  export type TodoListShareCountOrderByAggregateInput = {
    id?: SortOrder
    todoListId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
  }

  export type TodoListShareAvgOrderByAggregateInput = {
    id?: SortOrder
    todoListId?: SortOrder
    userId?: SortOrder
  }

  export type TodoListShareMaxOrderByAggregateInput = {
    id?: SortOrder
    todoListId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
  }

  export type TodoListShareMinOrderByAggregateInput = {
    id?: SortOrder
    todoListId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
  }

  export type TodoListShareSumOrderByAggregateInput = {
    id?: SortOrder
    todoListId?: SortOrder
    userId?: SortOrder
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type TodoListCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutOwnerInput>, Enumerable<TodoListUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutOwnerInput>
    createMany?: TodoListCreateManyOwnerInputEnvelope
    connect?: Enumerable<TodoListWhereUniqueInput>
  }

  export type TodoListCreateNestedManyWithoutSharedUsersInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutSharedUsersInput>, Enumerable<TodoListUncheckedCreateWithoutSharedUsersInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutSharedUsersInput>
    connect?: Enumerable<TodoListWhereUniqueInput>
  }

  export type TodoListShareCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TodoListShareCreateWithoutUserInput>, Enumerable<TodoListShareUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TodoListShareCreateOrConnectWithoutUserInput>
    createMany?: TodoListShareCreateManyUserInputEnvelope
    connect?: Enumerable<TodoListShareWhereUniqueInput>
  }

  export type TodoListUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutOwnerInput>, Enumerable<TodoListUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutOwnerInput>
    createMany?: TodoListCreateManyOwnerInputEnvelope
    connect?: Enumerable<TodoListWhereUniqueInput>
  }

  export type TodoListUncheckedCreateNestedManyWithoutSharedUsersInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutSharedUsersInput>, Enumerable<TodoListUncheckedCreateWithoutSharedUsersInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutSharedUsersInput>
    connect?: Enumerable<TodoListWhereUniqueInput>
  }

  export type TodoListShareUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TodoListShareCreateWithoutUserInput>, Enumerable<TodoListShareUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TodoListShareCreateOrConnectWithoutUserInput>
    createMany?: TodoListShareCreateManyUserInputEnvelope
    connect?: Enumerable<TodoListShareWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type OrganizationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type TodoListUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutOwnerInput>, Enumerable<TodoListUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<TodoListUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: TodoListCreateManyOwnerInputEnvelope
    set?: Enumerable<TodoListWhereUniqueInput>
    disconnect?: Enumerable<TodoListWhereUniqueInput>
    delete?: Enumerable<TodoListWhereUniqueInput>
    connect?: Enumerable<TodoListWhereUniqueInput>
    update?: Enumerable<TodoListUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<TodoListUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<TodoListScalarWhereInput>
  }

  export type TodoListUpdateManyWithoutSharedUsersNestedInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutSharedUsersInput>, Enumerable<TodoListUncheckedCreateWithoutSharedUsersInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutSharedUsersInput>
    upsert?: Enumerable<TodoListUpsertWithWhereUniqueWithoutSharedUsersInput>
    set?: Enumerable<TodoListWhereUniqueInput>
    disconnect?: Enumerable<TodoListWhereUniqueInput>
    delete?: Enumerable<TodoListWhereUniqueInput>
    connect?: Enumerable<TodoListWhereUniqueInput>
    update?: Enumerable<TodoListUpdateWithWhereUniqueWithoutSharedUsersInput>
    updateMany?: Enumerable<TodoListUpdateManyWithWhereWithoutSharedUsersInput>
    deleteMany?: Enumerable<TodoListScalarWhereInput>
  }

  export type TodoListShareUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TodoListShareCreateWithoutUserInput>, Enumerable<TodoListShareUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TodoListShareCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TodoListShareUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TodoListShareCreateManyUserInputEnvelope
    set?: Enumerable<TodoListShareWhereUniqueInput>
    disconnect?: Enumerable<TodoListShareWhereUniqueInput>
    delete?: Enumerable<TodoListShareWhereUniqueInput>
    connect?: Enumerable<TodoListShareWhereUniqueInput>
    update?: Enumerable<TodoListShareUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TodoListShareUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TodoListShareScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TodoListUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutOwnerInput>, Enumerable<TodoListUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<TodoListUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: TodoListCreateManyOwnerInputEnvelope
    set?: Enumerable<TodoListWhereUniqueInput>
    disconnect?: Enumerable<TodoListWhereUniqueInput>
    delete?: Enumerable<TodoListWhereUniqueInput>
    connect?: Enumerable<TodoListWhereUniqueInput>
    update?: Enumerable<TodoListUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<TodoListUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<TodoListScalarWhereInput>
  }

  export type TodoListUncheckedUpdateManyWithoutSharedUsersNestedInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutSharedUsersInput>, Enumerable<TodoListUncheckedCreateWithoutSharedUsersInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutSharedUsersInput>
    upsert?: Enumerable<TodoListUpsertWithWhereUniqueWithoutSharedUsersInput>
    set?: Enumerable<TodoListWhereUniqueInput>
    disconnect?: Enumerable<TodoListWhereUniqueInput>
    delete?: Enumerable<TodoListWhereUniqueInput>
    connect?: Enumerable<TodoListWhereUniqueInput>
    update?: Enumerable<TodoListUpdateWithWhereUniqueWithoutSharedUsersInput>
    updateMany?: Enumerable<TodoListUpdateManyWithWhereWithoutSharedUsersInput>
    deleteMany?: Enumerable<TodoListScalarWhereInput>
  }

  export type TodoListShareUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TodoListShareCreateWithoutUserInput>, Enumerable<TodoListShareUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TodoListShareCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TodoListShareUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TodoListShareCreateManyUserInputEnvelope
    set?: Enumerable<TodoListShareWhereUniqueInput>
    disconnect?: Enumerable<TodoListShareWhereUniqueInput>
    delete?: Enumerable<TodoListShareWhereUniqueInput>
    connect?: Enumerable<TodoListShareWhereUniqueInput>
    update?: Enumerable<TodoListShareUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TodoListShareUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TodoListShareScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationInput>, Enumerable<UserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationInput>
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TodoListCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutOrganizationInput>, Enumerable<TodoListUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutOrganizationInput>
    createMany?: TodoListCreateManyOrganizationInputEnvelope
    connect?: Enumerable<TodoListWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationInput>, Enumerable<UserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationInput>
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TodoListUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutOrganizationInput>, Enumerable<TodoListUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutOrganizationInput>
    createMany?: TodoListCreateManyOrganizationInputEnvelope
    connect?: Enumerable<TodoListWhereUniqueInput>
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationInput>, Enumerable<UserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TodoListUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutOrganizationInput>, Enumerable<TodoListUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<TodoListUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: TodoListCreateManyOrganizationInputEnvelope
    set?: Enumerable<TodoListWhereUniqueInput>
    disconnect?: Enumerable<TodoListWhereUniqueInput>
    delete?: Enumerable<TodoListWhereUniqueInput>
    connect?: Enumerable<TodoListWhereUniqueInput>
    update?: Enumerable<TodoListUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<TodoListUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<TodoListScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganizationInput>, Enumerable<UserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TodoListUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<TodoListCreateWithoutOrganizationInput>, Enumerable<TodoListUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<TodoListCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<TodoListUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: TodoListCreateManyOrganizationInputEnvelope
    set?: Enumerable<TodoListWhereUniqueInput>
    disconnect?: Enumerable<TodoListWhereUniqueInput>
    delete?: Enumerable<TodoListWhereUniqueInput>
    connect?: Enumerable<TodoListWhereUniqueInput>
    update?: Enumerable<TodoListUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<TodoListUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<TodoListScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutTodoListsInput = {
    create?: XOR<UserCreateWithoutTodoListsInput, UserUncheckedCreateWithoutTodoListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTodoListsInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutTodoListsInput = {
    create?: XOR<OrganizationCreateWithoutTodoListsInput, OrganizationUncheckedCreateWithoutTodoListsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTodoListsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type TodoItemCreateNestedManyWithoutTodoListInput = {
    create?: XOR<Enumerable<TodoItemCreateWithoutTodoListInput>, Enumerable<TodoItemUncheckedCreateWithoutTodoListInput>>
    connectOrCreate?: Enumerable<TodoItemCreateOrConnectWithoutTodoListInput>
    createMany?: TodoItemCreateManyTodoListInputEnvelope
    connect?: Enumerable<TodoItemWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutSharedTodoListsInput = {
    create?: XOR<Enumerable<UserCreateWithoutSharedTodoListsInput>, Enumerable<UserUncheckedCreateWithoutSharedTodoListsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSharedTodoListsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TodoListShareCreateNestedManyWithoutTodoListInput = {
    create?: XOR<Enumerable<TodoListShareCreateWithoutTodoListInput>, Enumerable<TodoListShareUncheckedCreateWithoutTodoListInput>>
    connectOrCreate?: Enumerable<TodoListShareCreateOrConnectWithoutTodoListInput>
    createMany?: TodoListShareCreateManyTodoListInputEnvelope
    connect?: Enumerable<TodoListShareWhereUniqueInput>
  }

  export type TodoItemUncheckedCreateNestedManyWithoutTodoListInput = {
    create?: XOR<Enumerable<TodoItemCreateWithoutTodoListInput>, Enumerable<TodoItemUncheckedCreateWithoutTodoListInput>>
    connectOrCreate?: Enumerable<TodoItemCreateOrConnectWithoutTodoListInput>
    createMany?: TodoItemCreateManyTodoListInputEnvelope
    connect?: Enumerable<TodoItemWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutSharedTodoListsInput = {
    create?: XOR<Enumerable<UserCreateWithoutSharedTodoListsInput>, Enumerable<UserUncheckedCreateWithoutSharedTodoListsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSharedTodoListsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TodoListShareUncheckedCreateNestedManyWithoutTodoListInput = {
    create?: XOR<Enumerable<TodoListShareCreateWithoutTodoListInput>, Enumerable<TodoListShareUncheckedCreateWithoutTodoListInput>>
    connectOrCreate?: Enumerable<TodoListShareCreateOrConnectWithoutTodoListInput>
    createMany?: TodoListShareCreateManyTodoListInputEnvelope
    connect?: Enumerable<TodoListShareWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutTodoListsNestedInput = {
    create?: XOR<UserCreateWithoutTodoListsInput, UserUncheckedCreateWithoutTodoListsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTodoListsInput
    upsert?: UserUpsertWithoutTodoListsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTodoListsInput, UserUncheckedUpdateWithoutTodoListsInput>
  }

  export type OrganizationUpdateOneWithoutTodoListsNestedInput = {
    create?: XOR<OrganizationCreateWithoutTodoListsInput, OrganizationUncheckedCreateWithoutTodoListsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTodoListsInput
    upsert?: OrganizationUpsertWithoutTodoListsInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutTodoListsInput, OrganizationUncheckedUpdateWithoutTodoListsInput>
  }

  export type TodoItemUpdateManyWithoutTodoListNestedInput = {
    create?: XOR<Enumerable<TodoItemCreateWithoutTodoListInput>, Enumerable<TodoItemUncheckedCreateWithoutTodoListInput>>
    connectOrCreate?: Enumerable<TodoItemCreateOrConnectWithoutTodoListInput>
    upsert?: Enumerable<TodoItemUpsertWithWhereUniqueWithoutTodoListInput>
    createMany?: TodoItemCreateManyTodoListInputEnvelope
    set?: Enumerable<TodoItemWhereUniqueInput>
    disconnect?: Enumerable<TodoItemWhereUniqueInput>
    delete?: Enumerable<TodoItemWhereUniqueInput>
    connect?: Enumerable<TodoItemWhereUniqueInput>
    update?: Enumerable<TodoItemUpdateWithWhereUniqueWithoutTodoListInput>
    updateMany?: Enumerable<TodoItemUpdateManyWithWhereWithoutTodoListInput>
    deleteMany?: Enumerable<TodoItemScalarWhereInput>
  }

  export type UserUpdateManyWithoutSharedTodoListsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutSharedTodoListsInput>, Enumerable<UserUncheckedCreateWithoutSharedTodoListsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSharedTodoListsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutSharedTodoListsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutSharedTodoListsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutSharedTodoListsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TodoListShareUpdateManyWithoutTodoListNestedInput = {
    create?: XOR<Enumerable<TodoListShareCreateWithoutTodoListInput>, Enumerable<TodoListShareUncheckedCreateWithoutTodoListInput>>
    connectOrCreate?: Enumerable<TodoListShareCreateOrConnectWithoutTodoListInput>
    upsert?: Enumerable<TodoListShareUpsertWithWhereUniqueWithoutTodoListInput>
    createMany?: TodoListShareCreateManyTodoListInputEnvelope
    set?: Enumerable<TodoListShareWhereUniqueInput>
    disconnect?: Enumerable<TodoListShareWhereUniqueInput>
    delete?: Enumerable<TodoListShareWhereUniqueInput>
    connect?: Enumerable<TodoListShareWhereUniqueInput>
    update?: Enumerable<TodoListShareUpdateWithWhereUniqueWithoutTodoListInput>
    updateMany?: Enumerable<TodoListShareUpdateManyWithWhereWithoutTodoListInput>
    deleteMany?: Enumerable<TodoListShareScalarWhereInput>
  }

  export type TodoItemUncheckedUpdateManyWithoutTodoListNestedInput = {
    create?: XOR<Enumerable<TodoItemCreateWithoutTodoListInput>, Enumerable<TodoItemUncheckedCreateWithoutTodoListInput>>
    connectOrCreate?: Enumerable<TodoItemCreateOrConnectWithoutTodoListInput>
    upsert?: Enumerable<TodoItemUpsertWithWhereUniqueWithoutTodoListInput>
    createMany?: TodoItemCreateManyTodoListInputEnvelope
    set?: Enumerable<TodoItemWhereUniqueInput>
    disconnect?: Enumerable<TodoItemWhereUniqueInput>
    delete?: Enumerable<TodoItemWhereUniqueInput>
    connect?: Enumerable<TodoItemWhereUniqueInput>
    update?: Enumerable<TodoItemUpdateWithWhereUniqueWithoutTodoListInput>
    updateMany?: Enumerable<TodoItemUpdateManyWithWhereWithoutTodoListInput>
    deleteMany?: Enumerable<TodoItemScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutSharedTodoListsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutSharedTodoListsInput>, Enumerable<UserUncheckedCreateWithoutSharedTodoListsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutSharedTodoListsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutSharedTodoListsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutSharedTodoListsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutSharedTodoListsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TodoListShareUncheckedUpdateManyWithoutTodoListNestedInput = {
    create?: XOR<Enumerable<TodoListShareCreateWithoutTodoListInput>, Enumerable<TodoListShareUncheckedCreateWithoutTodoListInput>>
    connectOrCreate?: Enumerable<TodoListShareCreateOrConnectWithoutTodoListInput>
    upsert?: Enumerable<TodoListShareUpsertWithWhereUniqueWithoutTodoListInput>
    createMany?: TodoListShareCreateManyTodoListInputEnvelope
    set?: Enumerable<TodoListShareWhereUniqueInput>
    disconnect?: Enumerable<TodoListShareWhereUniqueInput>
    delete?: Enumerable<TodoListShareWhereUniqueInput>
    connect?: Enumerable<TodoListShareWhereUniqueInput>
    update?: Enumerable<TodoListShareUpdateWithWhereUniqueWithoutTodoListInput>
    updateMany?: Enumerable<TodoListShareUpdateManyWithWhereWithoutTodoListInput>
    deleteMany?: Enumerable<TodoListShareScalarWhereInput>
  }

  export type TodoListCreateNestedOneWithoutItemsInput = {
    create?: XOR<TodoListCreateWithoutItemsInput, TodoListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: TodoListCreateOrConnectWithoutItemsInput
    connect?: TodoListWhereUniqueInput
  }

  export type TodoListUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<TodoListCreateWithoutItemsInput, TodoListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: TodoListCreateOrConnectWithoutItemsInput
    upsert?: TodoListUpsertWithoutItemsInput
    connect?: TodoListWhereUniqueInput
    update?: XOR<TodoListUpdateWithoutItemsInput, TodoListUncheckedUpdateWithoutItemsInput>
  }

  export type TodoListCreateNestedOneWithoutTodoListSharesInput = {
    create?: XOR<TodoListCreateWithoutTodoListSharesInput, TodoListUncheckedCreateWithoutTodoListSharesInput>
    connectOrCreate?: TodoListCreateOrConnectWithoutTodoListSharesInput
    connect?: TodoListWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTodoListSharesInput = {
    create?: XOR<UserCreateWithoutTodoListSharesInput, UserUncheckedCreateWithoutTodoListSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTodoListSharesInput
    connect?: UserWhereUniqueInput
  }

  export type TodoListUpdateOneRequiredWithoutTodoListSharesNestedInput = {
    create?: XOR<TodoListCreateWithoutTodoListSharesInput, TodoListUncheckedCreateWithoutTodoListSharesInput>
    connectOrCreate?: TodoListCreateOrConnectWithoutTodoListSharesInput
    upsert?: TodoListUpsertWithoutTodoListSharesInput
    connect?: TodoListWhereUniqueInput
    update?: XOR<TodoListUpdateWithoutTodoListSharesInput, TodoListUncheckedUpdateWithoutTodoListSharesInput>
  }

  export type UserUpdateOneRequiredWithoutTodoListSharesNestedInput = {
    create?: XOR<UserCreateWithoutTodoListSharesInput, UserUncheckedCreateWithoutTodoListSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTodoListSharesInput
    upsert?: UserUpsertWithoutTodoListSharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTodoListSharesInput, UserUncheckedUpdateWithoutTodoListSharesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type OrganizationCreateWithoutUsersInput = {
    name: string
    todoLists?: TodoListCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    todoLists?: TodoListUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type TodoListCreateWithoutOwnerInput = {
    name: string
    organization?: OrganizationCreateNestedOneWithoutTodoListsInput
    items?: TodoItemCreateNestedManyWithoutTodoListInput
    sharedUsers?: UserCreateNestedManyWithoutSharedTodoListsInput
    todoListShares?: TodoListShareCreateNestedManyWithoutTodoListInput
  }

  export type TodoListUncheckedCreateWithoutOwnerInput = {
    id?: number
    name: string
    organizationId?: number | null
    items?: TodoItemUncheckedCreateNestedManyWithoutTodoListInput
    sharedUsers?: UserUncheckedCreateNestedManyWithoutSharedTodoListsInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutTodoListInput
  }

  export type TodoListCreateOrConnectWithoutOwnerInput = {
    where: TodoListWhereUniqueInput
    create: XOR<TodoListCreateWithoutOwnerInput, TodoListUncheckedCreateWithoutOwnerInput>
  }

  export type TodoListCreateManyOwnerInputEnvelope = {
    data: Enumerable<TodoListCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type TodoListCreateWithoutSharedUsersInput = {
    name: string
    owner: UserCreateNestedOneWithoutTodoListsInput
    organization?: OrganizationCreateNestedOneWithoutTodoListsInput
    items?: TodoItemCreateNestedManyWithoutTodoListInput
    todoListShares?: TodoListShareCreateNestedManyWithoutTodoListInput
  }

  export type TodoListUncheckedCreateWithoutSharedUsersInput = {
    id?: number
    name: string
    ownerId: number
    organizationId?: number | null
    items?: TodoItemUncheckedCreateNestedManyWithoutTodoListInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutTodoListInput
  }

  export type TodoListCreateOrConnectWithoutSharedUsersInput = {
    where: TodoListWhereUniqueInput
    create: XOR<TodoListCreateWithoutSharedUsersInput, TodoListUncheckedCreateWithoutSharedUsersInput>
  }

  export type TodoListShareCreateWithoutUserInput = {
    permission: string
    todoList: TodoListCreateNestedOneWithoutTodoListSharesInput
  }

  export type TodoListShareUncheckedCreateWithoutUserInput = {
    id?: number
    todoListId: number
    permission: string
  }

  export type TodoListShareCreateOrConnectWithoutUserInput = {
    where: TodoListShareWhereUniqueInput
    create: XOR<TodoListShareCreateWithoutUserInput, TodoListShareUncheckedCreateWithoutUserInput>
  }

  export type TodoListShareCreateManyUserInputEnvelope = {
    data: Enumerable<TodoListShareCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    todoLists?: TodoListUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    todoLists?: TodoListUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type TodoListUpsertWithWhereUniqueWithoutOwnerInput = {
    where: TodoListWhereUniqueInput
    update: XOR<TodoListUpdateWithoutOwnerInput, TodoListUncheckedUpdateWithoutOwnerInput>
    create: XOR<TodoListCreateWithoutOwnerInput, TodoListUncheckedCreateWithoutOwnerInput>
  }

  export type TodoListUpdateWithWhereUniqueWithoutOwnerInput = {
    where: TodoListWhereUniqueInput
    data: XOR<TodoListUpdateWithoutOwnerInput, TodoListUncheckedUpdateWithoutOwnerInput>
  }

  export type TodoListUpdateManyWithWhereWithoutOwnerInput = {
    where: TodoListScalarWhereInput
    data: XOR<TodoListUpdateManyMutationInput, TodoListUncheckedUpdateManyWithoutTodoListsInput>
  }

  export type TodoListScalarWhereInput = {
    AND?: Enumerable<TodoListScalarWhereInput>
    OR?: Enumerable<TodoListScalarWhereInput>
    NOT?: Enumerable<TodoListScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    ownerId?: IntFilter | number
    organizationId?: IntNullableFilter | number | null
  }

  export type TodoListUpsertWithWhereUniqueWithoutSharedUsersInput = {
    where: TodoListWhereUniqueInput
    update: XOR<TodoListUpdateWithoutSharedUsersInput, TodoListUncheckedUpdateWithoutSharedUsersInput>
    create: XOR<TodoListCreateWithoutSharedUsersInput, TodoListUncheckedCreateWithoutSharedUsersInput>
  }

  export type TodoListUpdateWithWhereUniqueWithoutSharedUsersInput = {
    where: TodoListWhereUniqueInput
    data: XOR<TodoListUpdateWithoutSharedUsersInput, TodoListUncheckedUpdateWithoutSharedUsersInput>
  }

  export type TodoListUpdateManyWithWhereWithoutSharedUsersInput = {
    where: TodoListScalarWhereInput
    data: XOR<TodoListUpdateManyMutationInput, TodoListUncheckedUpdateManyWithoutSharedTodoListsInput>
  }

  export type TodoListShareUpsertWithWhereUniqueWithoutUserInput = {
    where: TodoListShareWhereUniqueInput
    update: XOR<TodoListShareUpdateWithoutUserInput, TodoListShareUncheckedUpdateWithoutUserInput>
    create: XOR<TodoListShareCreateWithoutUserInput, TodoListShareUncheckedCreateWithoutUserInput>
  }

  export type TodoListShareUpdateWithWhereUniqueWithoutUserInput = {
    where: TodoListShareWhereUniqueInput
    data: XOR<TodoListShareUpdateWithoutUserInput, TodoListShareUncheckedUpdateWithoutUserInput>
  }

  export type TodoListShareUpdateManyWithWhereWithoutUserInput = {
    where: TodoListShareScalarWhereInput
    data: XOR<TodoListShareUpdateManyMutationInput, TodoListShareUncheckedUpdateManyWithoutTodoListSharesInput>
  }

  export type TodoListShareScalarWhereInput = {
    AND?: Enumerable<TodoListShareScalarWhereInput>
    OR?: Enumerable<TodoListShareScalarWhereInput>
    NOT?: Enumerable<TodoListShareScalarWhereInput>
    id?: IntFilter | number
    todoListId?: IntFilter | number
    userId?: IntFilter | number
    permission?: StringFilter | string
  }

  export type UserCreateWithoutOrganizationInput = {
    name: string
    email?: string | null
    todoLists?: TodoListCreateNestedManyWithoutOwnerInput
    sharedTodoLists?: TodoListCreateNestedManyWithoutSharedUsersInput
    todoListShares?: TodoListShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: number
    name: string
    email?: string | null
    todoLists?: TodoListUncheckedCreateNestedManyWithoutOwnerInput
    sharedTodoLists?: TodoListUncheckedCreateNestedManyWithoutSharedUsersInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: Enumerable<UserCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type TodoListCreateWithoutOrganizationInput = {
    name: string
    owner: UserCreateNestedOneWithoutTodoListsInput
    items?: TodoItemCreateNestedManyWithoutTodoListInput
    sharedUsers?: UserCreateNestedManyWithoutSharedTodoListsInput
    todoListShares?: TodoListShareCreateNestedManyWithoutTodoListInput
  }

  export type TodoListUncheckedCreateWithoutOrganizationInput = {
    id?: number
    name: string
    ownerId: number
    items?: TodoItemUncheckedCreateNestedManyWithoutTodoListInput
    sharedUsers?: UserUncheckedCreateNestedManyWithoutSharedTodoListsInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutTodoListInput
  }

  export type TodoListCreateOrConnectWithoutOrganizationInput = {
    where: TodoListWhereUniqueInput
    create: XOR<TodoListCreateWithoutOrganizationInput, TodoListUncheckedCreateWithoutOrganizationInput>
  }

  export type TodoListCreateManyOrganizationInputEnvelope = {
    data: Enumerable<TodoListCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    organizationId?: IntNullableFilter | number | null
    email?: StringNullableFilter | string | null
  }

  export type TodoListUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: TodoListWhereUniqueInput
    update: XOR<TodoListUpdateWithoutOrganizationInput, TodoListUncheckedUpdateWithoutOrganizationInput>
    create: XOR<TodoListCreateWithoutOrganizationInput, TodoListUncheckedCreateWithoutOrganizationInput>
  }

  export type TodoListUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: TodoListWhereUniqueInput
    data: XOR<TodoListUpdateWithoutOrganizationInput, TodoListUncheckedUpdateWithoutOrganizationInput>
  }

  export type TodoListUpdateManyWithWhereWithoutOrganizationInput = {
    where: TodoListScalarWhereInput
    data: XOR<TodoListUpdateManyMutationInput, TodoListUncheckedUpdateManyWithoutTodoListsInput>
  }

  export type UserCreateWithoutTodoListsInput = {
    name: string
    email?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    sharedTodoLists?: TodoListCreateNestedManyWithoutSharedUsersInput
    todoListShares?: TodoListShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTodoListsInput = {
    id?: number
    name: string
    organizationId?: number | null
    email?: string | null
    sharedTodoLists?: TodoListUncheckedCreateNestedManyWithoutSharedUsersInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTodoListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTodoListsInput, UserUncheckedCreateWithoutTodoListsInput>
  }

  export type OrganizationCreateWithoutTodoListsInput = {
    name: string
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutTodoListsInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutTodoListsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutTodoListsInput, OrganizationUncheckedCreateWithoutTodoListsInput>
  }

  export type TodoItemCreateWithoutTodoListInput = {
    name: string
    priority: number
  }

  export type TodoItemUncheckedCreateWithoutTodoListInput = {
    id?: number
    name: string
    priority: number
  }

  export type TodoItemCreateOrConnectWithoutTodoListInput = {
    where: TodoItemWhereUniqueInput
    create: XOR<TodoItemCreateWithoutTodoListInput, TodoItemUncheckedCreateWithoutTodoListInput>
  }

  export type TodoItemCreateManyTodoListInputEnvelope = {
    data: Enumerable<TodoItemCreateManyTodoListInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutSharedTodoListsInput = {
    name: string
    email?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    todoLists?: TodoListCreateNestedManyWithoutOwnerInput
    todoListShares?: TodoListShareCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSharedTodoListsInput = {
    id?: number
    name: string
    organizationId?: number | null
    email?: string | null
    todoLists?: TodoListUncheckedCreateNestedManyWithoutOwnerInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSharedTodoListsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSharedTodoListsInput, UserUncheckedCreateWithoutSharedTodoListsInput>
  }

  export type TodoListShareCreateWithoutTodoListInput = {
    permission: string
    user: UserCreateNestedOneWithoutTodoListSharesInput
  }

  export type TodoListShareUncheckedCreateWithoutTodoListInput = {
    id?: number
    userId: number
    permission: string
  }

  export type TodoListShareCreateOrConnectWithoutTodoListInput = {
    where: TodoListShareWhereUniqueInput
    create: XOR<TodoListShareCreateWithoutTodoListInput, TodoListShareUncheckedCreateWithoutTodoListInput>
  }

  export type TodoListShareCreateManyTodoListInputEnvelope = {
    data: Enumerable<TodoListShareCreateManyTodoListInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTodoListsInput = {
    update: XOR<UserUpdateWithoutTodoListsInput, UserUncheckedUpdateWithoutTodoListsInput>
    create: XOR<UserCreateWithoutTodoListsInput, UserUncheckedCreateWithoutTodoListsInput>
  }

  export type UserUpdateWithoutTodoListsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    sharedTodoLists?: TodoListUpdateManyWithoutSharedUsersNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTodoListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    sharedTodoLists?: TodoListUncheckedUpdateManyWithoutSharedUsersNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationUpsertWithoutTodoListsInput = {
    update: XOR<OrganizationUpdateWithoutTodoListsInput, OrganizationUncheckedUpdateWithoutTodoListsInput>
    create: XOR<OrganizationCreateWithoutTodoListsInput, OrganizationUncheckedCreateWithoutTodoListsInput>
  }

  export type OrganizationUpdateWithoutTodoListsInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutTodoListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type TodoItemUpsertWithWhereUniqueWithoutTodoListInput = {
    where: TodoItemWhereUniqueInput
    update: XOR<TodoItemUpdateWithoutTodoListInput, TodoItemUncheckedUpdateWithoutTodoListInput>
    create: XOR<TodoItemCreateWithoutTodoListInput, TodoItemUncheckedCreateWithoutTodoListInput>
  }

  export type TodoItemUpdateWithWhereUniqueWithoutTodoListInput = {
    where: TodoItemWhereUniqueInput
    data: XOR<TodoItemUpdateWithoutTodoListInput, TodoItemUncheckedUpdateWithoutTodoListInput>
  }

  export type TodoItemUpdateManyWithWhereWithoutTodoListInput = {
    where: TodoItemScalarWhereInput
    data: XOR<TodoItemUpdateManyMutationInput, TodoItemUncheckedUpdateManyWithoutItemsInput>
  }

  export type TodoItemScalarWhereInput = {
    AND?: Enumerable<TodoItemScalarWhereInput>
    OR?: Enumerable<TodoItemScalarWhereInput>
    NOT?: Enumerable<TodoItemScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    priority?: IntFilter | number
    todoListId?: IntFilter | number
  }

  export type UserUpsertWithWhereUniqueWithoutSharedTodoListsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSharedTodoListsInput, UserUncheckedUpdateWithoutSharedTodoListsInput>
    create: XOR<UserCreateWithoutSharedTodoListsInput, UserUncheckedCreateWithoutSharedTodoListsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSharedTodoListsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSharedTodoListsInput, UserUncheckedUpdateWithoutSharedTodoListsInput>
  }

  export type UserUpdateManyWithWhereWithoutSharedTodoListsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSharedUsersInput>
  }

  export type TodoListShareUpsertWithWhereUniqueWithoutTodoListInput = {
    where: TodoListShareWhereUniqueInput
    update: XOR<TodoListShareUpdateWithoutTodoListInput, TodoListShareUncheckedUpdateWithoutTodoListInput>
    create: XOR<TodoListShareCreateWithoutTodoListInput, TodoListShareUncheckedCreateWithoutTodoListInput>
  }

  export type TodoListShareUpdateWithWhereUniqueWithoutTodoListInput = {
    where: TodoListShareWhereUniqueInput
    data: XOR<TodoListShareUpdateWithoutTodoListInput, TodoListShareUncheckedUpdateWithoutTodoListInput>
  }

  export type TodoListShareUpdateManyWithWhereWithoutTodoListInput = {
    where: TodoListShareScalarWhereInput
    data: XOR<TodoListShareUpdateManyMutationInput, TodoListShareUncheckedUpdateManyWithoutTodoListSharesInput>
  }

  export type TodoListCreateWithoutItemsInput = {
    name: string
    owner: UserCreateNestedOneWithoutTodoListsInput
    organization?: OrganizationCreateNestedOneWithoutTodoListsInput
    sharedUsers?: UserCreateNestedManyWithoutSharedTodoListsInput
    todoListShares?: TodoListShareCreateNestedManyWithoutTodoListInput
  }

  export type TodoListUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    ownerId: number
    organizationId?: number | null
    sharedUsers?: UserUncheckedCreateNestedManyWithoutSharedTodoListsInput
    todoListShares?: TodoListShareUncheckedCreateNestedManyWithoutTodoListInput
  }

  export type TodoListCreateOrConnectWithoutItemsInput = {
    where: TodoListWhereUniqueInput
    create: XOR<TodoListCreateWithoutItemsInput, TodoListUncheckedCreateWithoutItemsInput>
  }

  export type TodoListUpsertWithoutItemsInput = {
    update: XOR<TodoListUpdateWithoutItemsInput, TodoListUncheckedUpdateWithoutItemsInput>
    create: XOR<TodoListCreateWithoutItemsInput, TodoListUncheckedCreateWithoutItemsInput>
  }

  export type TodoListUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutTodoListsNestedInput
    organization?: OrganizationUpdateOneWithoutTodoListsNestedInput
    sharedUsers?: UserUpdateManyWithoutSharedTodoListsNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    sharedUsers?: UserUncheckedUpdateManyWithoutSharedTodoListsNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListCreateWithoutTodoListSharesInput = {
    name: string
    owner: UserCreateNestedOneWithoutTodoListsInput
    organization?: OrganizationCreateNestedOneWithoutTodoListsInput
    items?: TodoItemCreateNestedManyWithoutTodoListInput
    sharedUsers?: UserCreateNestedManyWithoutSharedTodoListsInput
  }

  export type TodoListUncheckedCreateWithoutTodoListSharesInput = {
    id?: number
    name: string
    ownerId: number
    organizationId?: number | null
    items?: TodoItemUncheckedCreateNestedManyWithoutTodoListInput
    sharedUsers?: UserUncheckedCreateNestedManyWithoutSharedTodoListsInput
  }

  export type TodoListCreateOrConnectWithoutTodoListSharesInput = {
    where: TodoListWhereUniqueInput
    create: XOR<TodoListCreateWithoutTodoListSharesInput, TodoListUncheckedCreateWithoutTodoListSharesInput>
  }

  export type UserCreateWithoutTodoListSharesInput = {
    name: string
    email?: string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    todoLists?: TodoListCreateNestedManyWithoutOwnerInput
    sharedTodoLists?: TodoListCreateNestedManyWithoutSharedUsersInput
  }

  export type UserUncheckedCreateWithoutTodoListSharesInput = {
    id?: number
    name: string
    organizationId?: number | null
    email?: string | null
    todoLists?: TodoListUncheckedCreateNestedManyWithoutOwnerInput
    sharedTodoLists?: TodoListUncheckedCreateNestedManyWithoutSharedUsersInput
  }

  export type UserCreateOrConnectWithoutTodoListSharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTodoListSharesInput, UserUncheckedCreateWithoutTodoListSharesInput>
  }

  export type TodoListUpsertWithoutTodoListSharesInput = {
    update: XOR<TodoListUpdateWithoutTodoListSharesInput, TodoListUncheckedUpdateWithoutTodoListSharesInput>
    create: XOR<TodoListCreateWithoutTodoListSharesInput, TodoListUncheckedCreateWithoutTodoListSharesInput>
  }

  export type TodoListUpdateWithoutTodoListSharesInput = {
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutTodoListsNestedInput
    organization?: OrganizationUpdateOneWithoutTodoListsNestedInput
    items?: TodoItemUpdateManyWithoutTodoListNestedInput
    sharedUsers?: UserUpdateManyWithoutSharedTodoListsNestedInput
  }

  export type TodoListUncheckedUpdateWithoutTodoListSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: TodoItemUncheckedUpdateManyWithoutTodoListNestedInput
    sharedUsers?: UserUncheckedUpdateManyWithoutSharedTodoListsNestedInput
  }

  export type UserUpsertWithoutTodoListSharesInput = {
    update: XOR<UserUpdateWithoutTodoListSharesInput, UserUncheckedUpdateWithoutTodoListSharesInput>
    create: XOR<UserCreateWithoutTodoListSharesInput, UserUncheckedCreateWithoutTodoListSharesInput>
  }

  export type UserUpdateWithoutTodoListSharesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    todoLists?: TodoListUpdateManyWithoutOwnerNestedInput
    sharedTodoLists?: TodoListUpdateManyWithoutSharedUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTodoListSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    todoLists?: TodoListUncheckedUpdateManyWithoutOwnerNestedInput
    sharedTodoLists?: TodoListUncheckedUpdateManyWithoutSharedUsersNestedInput
  }

  export type TodoListCreateManyOwnerInput = {
    id?: number
    name: string
    organizationId?: number | null
  }

  export type TodoListShareCreateManyUserInput = {
    id?: number
    todoListId: number
    permission: string
  }

  export type TodoListUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneWithoutTodoListsNestedInput
    items?: TodoItemUpdateManyWithoutTodoListNestedInput
    sharedUsers?: UserUpdateManyWithoutSharedTodoListsNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: TodoItemUncheckedUpdateManyWithoutTodoListNestedInput
    sharedUsers?: UserUncheckedUpdateManyWithoutSharedTodoListsNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListUncheckedUpdateManyWithoutTodoListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TodoListUpdateWithoutSharedUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutTodoListsNestedInput
    organization?: OrganizationUpdateOneWithoutTodoListsNestedInput
    items?: TodoItemUpdateManyWithoutTodoListNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListUncheckedUpdateWithoutSharedUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: TodoItemUncheckedUpdateManyWithoutTodoListNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListUncheckedUpdateManyWithoutSharedTodoListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TodoListShareUpdateWithoutUserInput = {
    permission?: StringFieldUpdateOperationsInput | string
    todoList?: TodoListUpdateOneRequiredWithoutTodoListSharesNestedInput
  }

  export type TodoListShareUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    todoListId?: IntFieldUpdateOperationsInput | number
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type TodoListShareUncheckedUpdateManyWithoutTodoListSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    todoListId?: IntFieldUpdateOperationsInput | number
    permission?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyOrganizationInput = {
    id?: number
    name: string
    email?: string | null
  }

  export type TodoListCreateManyOrganizationInput = {
    id?: number
    name: string
    ownerId: number
  }

  export type UserUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    todoLists?: TodoListUpdateManyWithoutOwnerNestedInput
    sharedTodoLists?: TodoListUpdateManyWithoutSharedUsersNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    todoLists?: TodoListUncheckedUpdateManyWithoutOwnerNestedInput
    sharedTodoLists?: TodoListUncheckedUpdateManyWithoutSharedUsersNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TodoListUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutTodoListsNestedInput
    items?: TodoItemUpdateManyWithoutTodoListNestedInput
    sharedUsers?: UserUpdateManyWithoutSharedTodoListsNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutTodoListNestedInput
  }

  export type TodoListUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    items?: TodoItemUncheckedUpdateManyWithoutTodoListNestedInput
    sharedUsers?: UserUncheckedUpdateManyWithoutSharedTodoListsNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutTodoListNestedInput
  }

  export type TodoItemCreateManyTodoListInput = {
    id?: number
    name: string
    priority: number
  }

  export type TodoListShareCreateManyTodoListInput = {
    id?: number
    userId: number
    permission: string
  }

  export type TodoItemUpdateWithoutTodoListInput = {
    name?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type TodoItemUncheckedUpdateWithoutTodoListInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type TodoItemUncheckedUpdateManyWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutSharedTodoListsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    todoLists?: TodoListUpdateManyWithoutOwnerNestedInput
    todoListShares?: TodoListShareUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSharedTodoListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    todoLists?: TodoListUncheckedUpdateManyWithoutOwnerNestedInput
    todoListShares?: TodoListShareUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSharedUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TodoListShareUpdateWithoutTodoListInput = {
    permission?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTodoListSharesNestedInput
  }

  export type TodoListShareUncheckedUpdateWithoutTodoListInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    permission?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}