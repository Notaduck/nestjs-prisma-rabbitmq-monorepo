{"version":3,"file":"nestjs-zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/docs.ts","../src/types.ts","../src/util.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z\n  .enum(['true', 'false'])\n  .transform((arg) => arg === 'true')\n\nexport const configSchema = z.object({\n  relationModel: configBoolean.default('true').or(z.literal('default')),\n  generateDto: configBoolean.default('true'),\n  modelSuffix: z.string().default('Model'),\n  dtoSuffix: z.string().default('Dto'),\n  modelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  dtoCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  useDecimalJs: configBoolean.default('false'),\n  imports: z.string().optional(),\n  prismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport interface PrismaOptions {\n  schemaPath: string\n  outputPath: string\n  clientPath: string\n}\n\nexport interface Names {\n  model: string\n  related: string\n}\n","enum Directive {\n  Start = '@z.',\n  Append = '@z&.',\n}\n\nconst SLICE_OFFSETS: Record<Directive, number> = {\n  [Directive.Start]: 1,\n  [Directive.Append]: 3,\n}\n\nfunction hasDirectives(line: string, directives = Object.values(Directive)) {\n  return directives.some((directive) => {\n    return line.trim().startsWith(directive)\n  })\n}\n\nfunction hasNoDirectives(line: string, directives?: Directive[]) {\n  return !hasDirectives(line, directives)\n}\n\nfunction extractDirectiveValue(lines: string[], directive: Directive) {\n  for (const line of lines) {\n    if (hasNoDirectives(line, [directive])) continue\n    return line.trim().slice(SLICE_OFFSETS[directive])\n  }\n\n  return null\n}\n\nexport const getJSDocs = (docString?: string) => {\n  const lines: string[] = []\n\n  if (docString) {\n    const docLines = docString\n      .split('\\n')\n      .filter((line) => hasNoDirectives(line))\n\n    if (docLines.length > 0) {\n      lines.push('/**')\n      docLines.forEach((line) => lines.push(` * ${line}`))\n      lines.push(' */')\n    }\n  }\n\n  return lines\n}\n\nexport function findCustomSchema(documentation: string): string | null {\n  const lines = documentation.split('\\n')\n  return extractDirectiveValue(lines, Directive.Start)\n}\n\nexport function findSchemaAppends(documentation: string): string[] {\n  const appends: string[] = []\n\n  for (const line of documentation.split('\\n')) {\n    const append = extractDirectiveValue([line], Directive.Append)\n    if (append) appends.push(append)\n  }\n\n  return appends\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { findCustomSchema, findSchemaAppends } from './docs'\n\nconst mapScalarType: Record<string, string> = {\n  String: 'z.string()',\n  Int: 'z.number().int()',\n  BigInt: 'z.bigint()',\n  DateTime: 'z.date()',\n  Float: 'z.number()',\n  Decimal: 'z.number()',\n  Json: 'z.json()',\n  Boolean: 'z.boolean()',\n  Bytes: 'z.instanceOf(Buffer)',\n}\n\nexport const getZodConstructor = (\n  field: DMMF.Field,\n  getRelatedModelName = (\n    name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n  ) => name.toString()\n) => {\n  let schema: string\n\n  if (\n    field.kind === 'scalar' &&\n    typeof field.type === 'string' &&\n    Object.prototype.hasOwnProperty.call(mapScalarType, field.type)\n  ) {\n    schema = mapScalarType[field.type]\n  } else if (field.kind === 'enum') {\n    schema = `z.nativeEnum(${field.type})`\n  } else if (field.kind === 'object') {\n    schema = getRelatedModelName(field.type)\n  } else {\n    schema = 'z.unknown()'\n  }\n\n  let isCustom = false\n\n  if (field.documentation) {\n    const custom = findCustomSchema(field.documentation)\n    const appends = findSchemaAppends(field.documentation)\n\n    if (custom) {\n      isCustom = true\n      schema = custom\n    }\n\n    for (const append of appends) {\n      schema += append\n    }\n  }\n\n  if (field.isList && !isCustom) {\n    schema += '.array()'\n  }\n\n  if (!field.isRequired && field.type !== 'Json') {\n    schema += '.nullish()'\n  }\n\n  return schema\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (\n  writer: CodeBlockWriter,\n  array: string[],\n  newLine = true\n) => array.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({\n  modelCase,\n  modelSuffix,\n  dtoSuffix,\n  dtoCase,\n  relationModel,\n}: Config) => {\n  const formatModelName = (name: string, prefix = '') => {\n    let result = name\n    if (modelCase === 'camelCase') {\n      result = result.slice(0, 1).toLowerCase() + result.slice(1)\n    }\n    return `${prefix}${result}${modelSuffix}`\n  }\n\n  const formatDtoName = (name: string) => {\n    let result = name\n    if (dtoCase === 'camelCase') {\n      result = result.slice(0, 1).toLowerCase() + result.slice(1)\n    }\n    return `${result}${dtoSuffix}`\n  }\n\n  return {\n    modelName: (name: string) =>\n      formatModelName(name, relationModel === 'default' ? '_' : ''),\n    dtoName: (name: string) => formatDtoName(name),\n    relatedModelName: (\n      name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n    ) =>\n      formatModelName(\n        relationModel === 'default'\n          ? name.toString()\n          : `Related${name.toString()}`\n      ),\n  }\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n  model.fields.some((field) => field.kind === 'object') &&\n  config.relationModel !== false\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n  return input.reduce((array, item, idx) => {\n    return idx % size === 0\n      ? [...array, [item]]\n      : [...array.slice(0, -1), [...array.slice(-1)[0], item]]\n  }, [])\n}\n\nexport const dotSlash = (input: string) => {\n  const converted = input\n    .replace(/^\\\\\\\\\\?\\\\/, '')\n    .replace(/\\\\/g, '/')\n    .replace(/\\/\\/+/g, '/')\n\n  if (converted.includes(`/node_modules/`))\n    return converted.split(`/node_modules/`).slice(-1)[0]\n\n  if (converted.startsWith(`../`)) return converted\n\n  return './' + converted\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n  ImportDeclarationStructure,\n  SourceFile,\n  StructureKind,\n  VariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\n\nexport const writeImportsForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  { schemaPath, outputPath }: PrismaOptions\n) => {\n  const { relatedModelName } = useModelNames(config)\n\n  const importList: ImportDeclarationStructure[] = [\n    {\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'z',\n      moduleSpecifier: 'nestjs-zod/z',\n    },\n  ]\n\n  if (config.generateDto) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['createZodDto'],\n      moduleSpecifier: 'nestjs-zod/dto',\n    })\n  }\n\n  if (config.imports) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'imports',\n      moduleSpecifier: dotSlash(\n        path.relative(\n          outputPath,\n          path.resolve(path.dirname(schemaPath), config.imports)\n        )\n      ),\n    })\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['Decimal'],\n      moduleSpecifier: 'decimal.js',\n    })\n  }\n\n  const enumFields = model.fields.filter((f) => f.kind === 'enum')\n  const relationFields = model.fields.filter((f) => f.kind === 'object')\n\n  if (enumFields.length > 0) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      isTypeOnly: enumFields.length === 0,\n      moduleSpecifier: dotSlash('enums'),\n      namedImports: enumFields.map((f) => f.type),\n    })\n  }\n\n  if (config.relationModel !== false && relationFields.length > 0) {\n    const filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n    if (filteredFields.length > 0) {\n      importList.push({\n        kind: StructureKind.ImportDeclaration,\n        moduleSpecifier: './index',\n        namedImports: Array.from(\n          new Set(\n            filteredFields.flatMap((f) => [\n              `Complete${f.type}`,\n              relatedModelName(f.type),\n            ])\n          )\n        ),\n      })\n    }\n  }\n\n  sourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine()\n      writeArray(writer, [\n        '// Helper schema for Decimal fields',\n        'z',\n        '.instanceof(Decimal)',\n        '.or(z.string())',\n        '.or(z.number())',\n        '.refine((value) => {',\n        '  try {',\n        '    return new Decimal(value);',\n        '  } catch (error) {',\n        '    return false;',\n        '  }',\n        '})',\n        '.transform((value) => new Decimal(value));',\n      ])\n    })\n  }\n}\n\nexport const generateSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName } = useModelNames(config)\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n    declarations: [\n      {\n        name: modelName(model.name),\n        initializer(writer) {\n          writer\n            .write('z.object(')\n            .inlineBlock(() => {\n              model.fields\n                .filter((f) => f.kind !== 'object')\n                .forEach((field) => {\n                  writeArray(writer, getJSDocs(field.documentation))\n                  writer\n                    .write(`${field.name}: ${getZodConstructor(field)}`)\n                    .write(',')\n                    .newLine()\n                })\n            })\n            .write(')')\n        },\n      },\n    ],\n  })\n}\n\nexport const generateDto = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config\n) => {\n  const { modelName, dtoName } = useModelNames(config)\n\n  sourceFile.addClass({\n    name: dtoName(model.name),\n    isExported: true,\n    leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n    extends: `createZodDto(${modelName(model.name)})`,\n  })\n}\n\nexport const generateRelatedSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName, relatedModelName } = useModelNames(config)\n\n  const relationFields = model.fields.filter((f) => f.kind === 'object')\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}`,\n    isExported: true,\n    extends: [`z.infer<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}${f.isList ? '[]' : ''}${\n        !f.isRequired ? ' | null' : ''\n      }`,\n    })),\n  })\n\n  sourceFile.addStatements((writer) =>\n    writeArray(writer, [\n      '',\n      '/**',\n      ` * ${relatedModelName(\n        model.name\n      )} contains all relations on your model in addition to the scalars`,\n      ' *',\n      ' * NOTE: Lazy required in case of potential circular dependencies within schema',\n      ' */',\n    ])\n  )\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    declarations: [\n      {\n        name: relatedModelName(model.name),\n        type: `z.ZodSchema<Complete${model.name}>`,\n        initializer(writer) {\n          writer\n            .write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n            .inlineBlock(() => {\n              relationFields.forEach((field) => {\n                writeArray(writer, getJSDocs(field.documentation))\n\n                writer\n                  .write(\n                    `${field.name}: ${getZodConstructor(\n                      field,\n                      relatedModelName\n                    )}`\n                  )\n                  .write(',')\n                  .newLine()\n              })\n            })\n            .write('))')\n        },\n      },\n    ],\n  })\n}\n\nexport const populateModelFile = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  prismaOptions: PrismaOptions\n) => {\n  writeImportsForModel(model, sourceFile, config, prismaOptions)\n  writeTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n  generateSchemaForModel(model, sourceFile, config, prismaOptions)\n  if (config.generateDto) generateDto(model, sourceFile, config)\n  if (needsRelatedModel(model, config))\n    generateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (\n  models: DMMF.Model[],\n  indexFile: SourceFile\n) => {\n  models.forEach((model) =>\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${model.name.toLowerCase()}`,\n    })\n  )\n}\n\nexport const generateEnumsFile = (\n  enums: DMMF.DatamodelEnum[],\n  enumsFile: SourceFile\n) => {\n  for (const { name, values } of enums) {\n    const members = values.map(({ name: memberName }) => {\n      return { name: memberName, value: memberName }\n    })\n\n    enumsFile\n      .addEnum({\n        name,\n        members,\n      })\n      .setIsExported(true)\n  }\n}\n","import { generatorHandler } from '@prisma/generator-helper'\nimport { Project } from 'ts-morph'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport {\n  populateModelFile,\n  generateBarrelFile,\n  generateEnumsFile,\n} from './generator'\n\nconst { version } = require('../package.json')\n\ngeneratorHandler({\n  onManifest() {\n    return {\n      version,\n      prettyName: 'NestJS Zod Schemas',\n      defaultOutput: './src/zod',\n    }\n  },\n  onGenerate(options) {\n    const project = new Project()\n\n    const models = options.dmmf.datamodel.models\n    const enums = options.dmmf.datamodel.enums\n\n    const { schemaPath } = options\n    const outputPath = options.generator.output!.value\n    const clientPath = options.otherGenerators.find(\n      (each) => each.provider.value === 'prisma-client-js'\n    )!.output!.value!\n\n    const results = configSchema.safeParse(options.generator.config)\n    if (!results.success)\n      throw new Error(\n        'Incorrect config provided. Please check the values you provided and try again.'\n      )\n\n    const config = results.data\n    const prismaOptions: PrismaOptions = {\n      clientPath,\n      outputPath,\n      schemaPath,\n    }\n\n    const indexFile = project.createSourceFile(\n      `${outputPath}/index.ts`,\n      {},\n      { overwrite: true }\n    )\n\n    generateBarrelFile(models, indexFile)\n\n    indexFile.formatText({\n      indentSize: 2,\n      convertTabsToSpaces: true,\n      semicolons: SemicolonPreference.Remove,\n    })\n\n    models.forEach((model) => {\n      const sourceFile = project.createSourceFile(\n        `${outputPath}/${model.name.toLowerCase()}.ts`,\n        {},\n        { overwrite: true }\n      )\n\n      populateModelFile(model, sourceFile, config, prismaOptions)\n\n      sourceFile.formatText({\n        indentSize: 2,\n        convertTabsToSpaces: true,\n        semicolons: SemicolonPreference.Remove,\n      })\n    })\n\n    if (enums.length > 0) {\n      const enumsFile = project.createSourceFile(\n        `${outputPath}/enums.ts`,\n        {},\n        { overwrite: true }\n      )\n\n      generateEnumsFile(enums, enumsFile)\n\n      enumsFile.formatText({\n        indentSize: 2,\n        convertTabsToSpaces: true,\n        semicolons: SemicolonPreference.Remove,\n      })\n    }\n\n    return project.save()\n  },\n})\n"],"names":["configBoolean","z","enum","transform","arg","configSchema","object","relationModel","default","or","literal","generateDto","modelSuffix","string","dtoSuffix","modelCase","dtoCase","useDecimalJs","imports","optional","prismaJsonNullability","Directive","SLICE_OFFSETS","Start","Append","hasDirectives","line","directives","Object","values","some","directive","trim","startsWith","hasNoDirectives","extractDirectiveValue","lines","slice","getJSDocs","docString","docLines","split","filter","length","push","forEach","findCustomSchema","documentation","findSchemaAppends","appends","append","mapScalarType","String","Int","BigInt","DateTime","Float","Decimal","Json","Boolean","Bytes","getZodConstructor","field","getRelatedModelName","name","toString","schema","kind","type","prototype","hasOwnProperty","call","isCustom","custom","isList","isRequired","writeArray","writer","array","newLine","write","conditionalNewLine","useModelNames","formatModelName","prefix","result","toLowerCase","formatDtoName","modelName","dtoName","relatedModelName","needsRelatedModel","model","config","fields","dotSlash","input","converted","replace","includes","writeImportsForModel","sourceFile","schemaPath","outputPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","namedImports","path","relative","resolve","dirname","f","enumFields","relationFields","isTypeOnly","map","filteredFields","Array","from","Set","flatMap","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","addClass","extends","generateRelatedSchemaForModel","addInterface","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generateEnumsFile","enums","enumsFile","members","memberName","value","addEnum","setIsExported","version","require","generatorHandler","onManifest","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","clientPath","otherGenerators","find","each","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}